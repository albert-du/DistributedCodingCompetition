@rendermode InteractiveServer
@page "/"
@inject ExecRunnerContext ExecRunnerContext
@inject NavigationManager NavigationManager
@inject IRefreshEventService RefreshEventService
@implements IDisposable

<h3>Runner CRUD</h3>

@if (execRunners == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="AddRunner">Add New Runner</button>
    <table class="table-auto">
        <thead>
            <tr>
                <th>Name</th>
                <th>Endpoint</th>
                <th>Enabled</th>
                <th>Available</th>
                <th>Live</th>
                <th>System</th>
                <th>Packages</th>
                <th>Languages</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var runner in execRunners)
            {
                <tr>
                    <td>@runner.Name</td>
                    <td>@runner.Endpoint</td>
                    <td>@runner.Available</td>
                    <td>@runner.Available</td>
                    <td>@runner.Live</td>
                    <td>@runner.SystemInfo</td>
                    <td>@runner.Packages</td>
                    <td>@runner.Languages</td>
                    <td>
                        <button class="" @onclick="() => EditRunner(runner.Id)">Edit</button>
                        <button class="" @onclick="() => DeleteRunner(runner.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ExecRunner>? execRunners;

    protected override Task OnInitializedAsync()
    {
        execRunners = ExecRunnerContext.ExecRunners.ToList();
        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RefreshEventService.RefreshEvent += RefreshRunners;
        }
        return Task.CompletedTask;
    }

    private void RefreshRunners(object? sender, EventArgs args)
    {
        execRunners = ExecRunnerContext.ExecRunners.ToList();
        InvokeAsync(StateHasChanged);
    }

    private void AddRunner()
    {
        NavigationManager.NavigateTo("execrunner");
    }

    private async Task EditRunner(Guid runnerId)
    {
        NavigationManager.NavigateTo($"execrunner/{runnerId}");
    }

    private async Task DeleteRunner(Guid runnerId)
    {
        var runner = await ExecRunnerContext.ExecRunners.FindAsync(runnerId);
        if (runner is null)
            return;
        ExecRunnerContext.ExecRunners.Remove(runner);
        await ExecRunnerContext.SaveChangesAsync();
        execRunners?.Remove(runner); // Update UI
    }

    public void Dispose()
    {
        RefreshEventService.RefreshEvent -= RefreshRunners;
    }
}