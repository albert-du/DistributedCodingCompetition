@rendermode InteractiveServer
@page "/"
@inject ExecRunnerContext ExecRunnerContext
@inject NavigationManager NavigationManager
@inject IRefreshEventService RefreshEventService
@implements IDisposable

<div class="mx-12 mt-4">
    <h3 class="text-2xl">Execution Runners</h3>

    @if (execRunners == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <button class="px-2 my-1 bg-gray-100 rounded-lg btn btn-primary hover:bg-gray-200 " @onclick="AddRunner">Add New Runner</button>
        <table class="border border-collapse table-auto border-slate-400 sm:w-4/5">
            <thead class="border border-slate-400 ">
                <tr>
                    <th class="border border-slate-400">Name</th>
                    <th class="w-64 border border-slate-400">Endpoint</th>
                    <th class="border border-slate-400">Weight</th>
                    <th class="border border-slate-400">Enabled</th>
                    <th class="border border-slate-400">Available</th>
                    <th class="border border-slate-400">Live</th>
                    <th class="border border-slate-400">Status</th>
                    <th class="border border-slate-400">System</th>
                    <th class="border border-slate-400">Packages</th>
                    <th class="border border-slate-400">Languages</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var runner in execRunners)
                {
                    <tr class="border border-slate-400 ">
                        <td class="border border-slate-300">@runner.Name</td>
                        <td class="border border-slate-300">@runner.Endpoint</td>
                        <td class="border border-slate-300">@((runner.Available && runner.Enabled ? runner.Weight : 0) *
                    100 / totalWeight) &percnt;</td>
                        <td class="border border-slate-300">@runner.Enabled</td>
                        <td class="border border-slate-300">@runner.Available</td>
                        <td class="border border-slate-300">@runner.Live</td>
                        <td class="border border-slate-300">@runner.Status</td>
                        <td class="border border-slate-300">
                            @foreach (var line in runner.SystemInfo.Split('\n'))
                            {
                                <div>@line</div>
                            }

                        </td>
                        <td class="border border-slate-300">
                            @foreach (var p in runner.Packages)
                            {
                                <div>@p</div>
                            }
                        </td>
                        <td class="border border-slate-300">
                            @foreach (var l in runner.Languages)
                            {
                                <div>@l</div>
                            }
                        </td>
                        <td class="border border-slate-300">
                            <button class="p-1 mx-1 my-2 bg-gray-200 rounded-sm hover:bg-gray-300"
                                @onclick="() => EditRunner(runner.Id)">Edit</button>
                            <button class="p-1 mx-1 my-2 rounded-sm bg-rose-500 hover:rose-gray-600"
                                @onclick="() => DeleteRunner(runner.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

</div>

@code {
    private DateTime lastRefreshTime = DateTime.Now;
    private List<ExecRunner>? execRunners;
    private int totalWeight = -1;
    protected override Task OnInitializedAsync()
    {
        execRunners = ExecRunnerContext.ExecRunners.ToList();
        var t = execRunners.Where(r => r.Available && r.Enabled).Sum(r => r.Weight);
        if (t == 0) t = -1;
        totalWeight = t;
        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RefreshEventService.RefreshEvent += RefreshRunners;
        }
        return Task.CompletedTask;
    }
    bool updateInProg;
    private async void RefreshRunners(object? sender, EventArgs args)
    {
        if (updateInProg)
            return;
        updateInProg = true;
        execRunners = ExecRunnerContext.ExecRunners.ToList();
        var t = execRunners.Where(r => r.Available && r.Enabled).Sum(r => r.Weight);
        if (t == 0) t = -1;
        totalWeight = t;
        lastRefreshTime = DateTime.Now;
        await InvokeAsync(StateHasChanged);
        updateInProg = false;
    }

    private void AddRunner() =>
        NavigationManager.NavigateTo("execrunner");

    private void EditRunner(Guid runnerId) =>
        NavigationManager.NavigateTo($"execrunner/{runnerId}");

    private async Task DeleteRunner(Guid runnerId)
    {
        var runner = await ExecRunnerContext.ExecRunners.FindAsync(runnerId);
        if (runner is null)
            return;
        ExecRunnerContext.ExecRunners.Remove(runner);
        await ExecRunnerContext.SaveChangesAsync();
        execRunners?.Remove(runner); // Update UI
    }

    public void Dispose()
    {
        RefreshEventService.RefreshEvent -= RefreshRunners;
    }
}