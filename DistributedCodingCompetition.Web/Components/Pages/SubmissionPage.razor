@page "/submission/{id:guid}"
@inject IApiService ApiService
@inject IModalService ModalService

@if (submission is null || user is null)
{
    <p>Submission not found</p>
}
else
{
    @if (Admin)
    {
        <AuthCheck Contest=submission.ContestId Admin />
    }
    else if (submission.ContestId is null)
    {
        <AuthCheck Id=submission.SubmitterId />
    }
    else
    {
        <AuthCheck Contest=submission.ContestId Id=submission.SubmitterId />
    }

    <h1 class="text-3xl">Submission</h1>
    <div class="text-2xl">@contestName: @problemName</div>
    <p>Time UTC: @submission.SubmissionTime</p>
    <p>Judge Time UTC: @submission.EvaluationTime</p>
    <p>Language: @submission.Language</p>
    <p>Score: @submission.Score / @submission.MaxPossibleScore</p>
    <p>Contestant: @($"{user.FullName} @{user.Username}")</p>

    <h2>Code</h2>
    <div class="h-64">
        <CodeEditor ReadOnly Code=@submission.Code Language=@(submission.Language.Split('=').FirstOrDefault() ?? "text") />
    </div>

    @if (displayTestCases)
    {
        <div>
            <h2>Test cases</h2>
            <div>
                @foreach (var testcase in results)
                {
                    <div class="flex">
                        <div>

                        </div>
                        <div>
                            @(testcase.Passed ? "Passed" : "Failed")
                        </div>

                    </div>
                }
            </div>
        </div>

    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromQuery]
    public bool Admin { get; set; }

    Submission? submission;
    string problemName = string.Empty;
    string contestName = string.Empty;
    User? user;

    bool displayTestCases;

    IReadOnlyList<TestCaseResult> results = [];

    protected override async Task OnInitializedAsync()
    {
        (var success, submission) = await ApiService.TryReadSubmissionAsync(Id);
        if (!success || submission is null)
        {
            ModalService.ShowError("Failed to load submission", "Internal error");
            return;
        }

        if (!submission.ContestId.HasValue)
        {
            displayTestCases = true;
        }
        else
        {
            (success, var contest) = await ApiService.TryReadContestAsync(submission.ContestId.Value);
            if (!success || contest is null)
            {
                ModalService.ShowError("Failed to load contest", "Internal error");
                return;
            }
            contestName = contest.Name;

            displayTestCases = !contest.Active || Admin;
        }

        // load problem name

        (success, var problem) = await ApiService.TryReadProblemAsync(submission.ProblemId);
        if (!success || problem is null)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            return;
        }

        problemName = problem.Name;

        // load user

        (success, user) = await ApiService.TryReadUserAsync(submission.SubmitterId);

        if (!success || user is null)
        {
            ModalService.ShowError("Failed to load user", "Internal error");
            return;
        }

        (success, var res) = await ApiService.TryReadTestCaseResultsAsync(Id);
        if (!success || res is null)
        {
            ModalService.ShowError("Failed to load test case results", "Internal error");
            return;
        }
        results = res;
    }
}