@page "/admin/users"
@inject IUsersService UsersService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
<AuthCheck Admin />

<PageTitle>Users</PageTitle>

<h1 class="text-2xl">Application Users</h1>

@if (users is null)
{
    <LoadingSpinner />
}
else
{
    <div class="flex flex-col gap-y-1">
        @foreach (var user in users.Items)
        {
            <div class="flex gap-x-2">
                <div>
                    @($"{user.FullName} @{user.Username}")
                </div>
            </div>
        }
        <div class="flex">
            <button class="rounded-lg px-2 py-1 bg-rose-500 text-slate-200" @onclick=Next enableds="@(users.NextEnabled)">Next</button>
            <button class="rounded-lg px-2 py-1 bg-rose-500 text-slate-200" @onclick=Prev enableds="@(users.PreviousEnabled)">Prev</button>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    int page => Page ?? 1;

    PaginateResult<UserResponseDTO>? users;


    void Next()
    {
        if (users?.NextEnabled is true)
            NavigationManager.NavigateTo($"/admin/banned?page={page + 1}");
    }

    void Prev()
    {
        if (users?.PreviousEnabled is true)
            NavigationManager.NavigateTo($"/admin/banned?page={page - 1}");
    }

    async Task UnbanUserAsync(UserResponseDTO user)
    {
        // TODO implement
        // if (!await ApiService.TryUnbanUserAsync(user.Id))
        // {
        //     ModalService.ShowError("Failed to unban user", "Internal error");
        //     return;
        // }
    }

    protected override async Task OnParametersSetAsync()
    {
        var (success, users_) = await UsersService.TryReadUsersAsync(page, 50);
        if (!success || users_ is null)
        {
            ModalService.ShowError("Failed to load users", "Internal error");
            return;
        }
        users = users_;
    }
}