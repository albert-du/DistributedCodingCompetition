@page "/admin/users"
@inject IApiService ApiService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
<AuthCheck Admin />

<PageTitle>Users</PageTitle>

<h1 class="text-2xl">Application Users</h1>

<div class="flex flex-col gap-y-1">
    @foreach (var user in users)
    {
        <div class="flex gap-x-2">
            <div>
                @($"{user.FullName} @{user.Username}")
            </div>
        </div>
    }
    <div class="flex">
        <button class="rounded-lg px-2 py-1 bg-rose-500 text-slate-200" @onclick=Next disabled="@(!NextEnabled)">Next</button>
        <button class="rounded-lg px-2 py-1 bg-rose-500 text-slate-200" @onclick=Prev disabled="@(!PrevEnabled)">Prev</button>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    int page => Page ?? 1;

    IReadOnlyList<User> users = [];

    bool NextEnabled => users.Count == 50;

    bool PrevEnabled => page > 1;

    void Next()
    {
        if (!NextEnabled)
        {
            return;
        }
        NavigationManager.NavigateTo($"/admin/banned?page={page + 1}");
    }

    void Prev()
    {
        if (!PrevEnabled)
        {
            return;
        }
        NavigationManager.NavigateTo($"/admin/banned?page={page - 1}");
    }

    async Task UnbanUserAsync(User user)
    {
        if (!await ApiService.TryUnbanUserAsync(user.Id))
        {
            ModalService.ShowError("Failed to unban user", "Internal error");
            return;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var (success, banned_) = await ApiService.TryReadUsersAsync(page, 50);
        if (!success || banned_ is null)
        {
            ModalService.ShowError("Failed to load users", "Internal error");
            return;
        }
        banned = banned_;
    }
}