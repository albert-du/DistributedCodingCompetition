@page "/auth/login"
@inject IAuthService AuthService
@inject IApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<div class="py-2 mx-auto align-middle border rounded-lg border-slate-200 w-96">
    <h2 class="py-2 text-2xl text-center">Login</h2>
    <EditForm class="flex flex-col items-center justify-center gap-y-5" Model=model OnValidSubmit=SubmitAsync
        FormName="Login">
        <label class="flex flex-col">
            <div class="pl-2">
                Email
            </div>
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="username" type="email"
                @bind-Value=model.Email />
            <div class="h-2 text-rose-500">
                <ValidationMessage For=@(() => model.Email) />
            </div>
        </label>

        <label class="flex flex-col">
            <div class="pl-2">
                Password
            </div>
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password"
                @bind-Value=model.Password />
            <div class="h-2 text-rose-500">
                <ValidationMessage For=@(() => model.Password) />
            </div>
        </label>
        <div class="flex justify-center">
            <button
                class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                type="submit">Submit</button>
        </div>
        <DataAnnotationsValidator />
    </EditForm>
    <div>
        @error
    </div>

</div>


@code {
    [CascadingParameter]
    public ConnectionDetails? ConnectionDetails { get; set; }

    [Parameter]
    public string? ReturnUrl { get; set; }
    private string? error;
    private LoginModel model = new();

    bool submitted;
    private async Task SubmitAsync()
    {
        if (submitted)
            return;
        submitted = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000);

        (var success, var user) = await ApiService.TryUserByEmailAsync(model.Email);
        if (!success || user is null)
        {
            error = "Failed to login.";
            submitted = false;
            return;
        }

        var token = await AuthService.TryLoginAsync(user.Id, model.Password, ConnectionDetails?.UserAgent ?? "Unknown",
        ConnectionDetails?.IpAddress ?? "Unknown");
        var res = await JSRuntime.InvokeAsync<int>("post", "htau/login", token);

        if (res != 200)
        {
            error = $"Failed to login. Status: {res}";
            submitted = false;
            return;
        }

        submitted = false;
        await InvokeAsync(StateHasChanged);
    }

    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
