@*
    Registration page
*@
@using DistributedCodingCompetition.AuthModels
@page "/auth/register"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IEmailService EmailService
@inject IAuthService AuthService
@inject IApiService ApiService

<PageTitle>Register</PageTitle>

<div class="py-2 mx-auto align-middle border rounded-lg border-slate-200 w-96">
    <h2 class="py-2 text-2xl text-center">Register</h2>

    @if (loading)
    {
        <LoadingSpinner />
    }
    else if (otc is null)
    {
        <EditForm class="flex flex-col items-center justify-center gap-y-5" Model=model OnValidSubmit=SubmitAsync FormName="Registration">
            <label class="flex flex-col">
                <div class="pl-2">
                    Email
                </div>
                <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="username" type="email"
                           @bind-Value=model.Email placeholder="me@example.com" />
                <div class="h-2 text-rose-500">
                    <ValidationMessage For=@(() => model.Email) />
                </div>
            </label>

            <label class="flex flex-col">
                <div class="pl-2">
                    Password
                </div>
                <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password"
                           @bind-Value=model.Password />
                <div class="h-2 text-rose-500">
                    <ValidationMessage For=@(() => model.Password) />
                </div>
            </label>
            <label class="flex flex-col">
                <div class="pl-2">
                    Confirm Password
                </div>
                <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password"
                           @bind-Value=model.ConfirmPassword />
                <div class="h-2 text-rose-500">
                    <ValidationMessage For=@(() => model.ConfirmPassword) />
                </div>
            </label>

            <div class="flex justify-center">
                <button class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                        type="submit">
                    Submit
                </button>
            </div>

            <DataAnnotationsValidator />
        </EditForm>
    }
    else if (!otcValid)
    {
        <EditForm Model="otcModel" class="flex flex-col items-center gap-y-2">
            <h3>Enter the verification code sent to your email</h3>
            <p class="italic">@model.Email</p>
            <InputText pattern="[0-9]{6}" placeholder="000000"
                       class="w-20 px-2 py-1 my-2 ml-2 text-center bg-gray-100 rounded-lg text-slate-800"
                       @bind-Value=otcModel.OTC />
            <div class="flex justify-center py-3">
                <button class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                        type="submit" @onclick=SubmitAsync2>
                    Submit
                </button>
            </div>
            @if (resendEnabled)
            {
                <div class="flex justify-center">
                    <button class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                            @onclick=SendOTCAsync>
                        Resend
                    </button>
                </div>
            }
        </EditForm>
    }
    else
    {
        // otc is correct
        <EditForm Model=model2 class="flex flex-col items-center justify-center gap-y-5" OnValidSubmit=SubmitAsync3
                  FormName="UserDetails">
            <label class="flex flex-col">
                <div class="pl-2">
                    Full Name
                </div>
                <InputText placeholder="First Last" class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800"
                           @bind-Value=model2.FullName />
                <ValidationMessage For=@(() => model2.FullName) />
            </label>
            <label class="flex flex-col">
                <div class="pl-2">
                    Username
                    <div class="text-xs text-gray-500">5-25 characters <span class="italic">[a-z0-9_-]</span> </div>
                </div>
                <InputText placeholder="cool_hckr-23" class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800"
                           @bind-Value=model2.Username />
                <ValidationMessage For=@(() => model2.Username) />
            </label>

            <label class="flex flex-col">
                <div class="pl-2">
                    Birthday
                </div>
                <InputDate class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model2.Birthday />
                <ValidationMessage For=@(() => model2.Birthday) />
            </label>
            <div class="flex justify-center w-64 py-2">
                Your full name and username will be visible to other users.
            </div>
            <div class="flex justify-center py-3">
                <button class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                        type="submit" @onclick=SubmitAsync3>
                    Submit
                </button>
            </div>
            <DataAnnotationsValidator />
        </EditForm>
    }
    <div class="flex justify-center text-rose-500">
        @error
    </div>
</div>


@code {
    // Connection details including user agent and IP address.
    [CascadingParameter]
    public ConnectionDetails? ConnectionDetails { get; set; }

    // Redirect URL
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState?>? AuthState { get; set; }

    // Models
    RegisterModel model = new();
    RegisterModel2 model2 = new();
    OTCModel otcModel = new();

    string? otc = null; // generated verification code
    bool otcValid;
    bool resendEnabled = true;
    string? error = null;

    bool loading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || (AuthState is null) || (await AuthState)?.User.Identity?.IsAuthenticated is not true)
            return;

        var res = await JSRuntime.InvokeAsync<int>("post", "htau/logout");
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    async Task SubmitAsync()
    {
        if (loading)
            return;
        loading = true;
        error = null;
        await InvokeAsync(StateHasChanged);
        try
        {
            var (success, user) = await ApiService.TryReadUserByEmailAsync(model.Email);
            if (!success)
                // request failed
                return;

            // At this point the user is either null or not null

            if (user is not null)
            {
                if (ReturnUrl is not null)
                    NavigationManager.NavigateTo("/auth/login?returnUrl=" + ReturnUrl);
                else
                    NavigationManager.NavigateTo("/auth/login");
                return;
            }
            await SendOTCAsync();
        }
        finally
        {
            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task SubmitAsync2()
    {
        if (loading)
            return;

        // block
        error = null;
        loading = true;

        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000); // avoid spam

        // OTC generated and matches
        otcValid = otc is not null && otc == otcModel.OTC;

        if (!otcValid)
            error = "Invalid Code.";

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task SubmitAsync3()
    {
        if (loading)
            return;

        error = null;
        loading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            // make sure user doesn't exist
            var (success, existing) = await ApiService.TryReadUserByUsername(model2.Username);
            if (!success)
            {
                error = "Failed to check if user exists.";
                return;
            }

            if (existing is not null)
            {
                error = "Username already exists.";
                return;
            }

            if (await AuthService.TryRegisterAsync(model.Email, model.Password) is not Guid id)
            {
                error = "Failed to register.";
                return;
            }

            if (!await ApiService.TryCreateUserAsync(new()
                {
                    Id = id,
                    Email = model.Email,
                    Username = model2.Username,
                    Birthday = model2.Birthday.ToUniversalTime()
                }))
            {
                error = "Failed to create user.";
                return;
            }

            // login delay
            await Task.Delay(500);

            // login
            if (await AuthService.TryLoginAsync(id, model.Password, ConnectionDetails?.UserAgent ?? "Unknown", ConnectionDetails?.IpAddress ?? "Unknown") is not LoginResult result)
            {
                error = "Failed to login.";
                return;
            }

            if (await JSRuntime.InvokeAsync<int>("post", $"htau/login?token={Uri.EscapeDataString(result.Token)}") != 200)
            {
                error = "Failed to login.";
                return;
            }

            // force redirect
            NavigationManager.NavigateTo(ReturnUrl ?? "/dashboard", true);
        }
        finally
        {
            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task SendOTCAsync()
    {
        if (!resendEnabled)
            return;
        // block resend
        resendEnabled = false;

        // generate OTC
        otc = Utils.RandomOTC();
        await InvokeAsync(StateHasChanged);

        // send email
        await EmailService.SendEmailAsync(model.Email, "Verify your email", $"Your verification code is {otc}");

        // enable resend after 30 seconds
        _ = Wait30ThenEnableResend();
    }

    async Task Wait30ThenEnableResend()
    {
        await Task.Delay(30000);
        resendEnabled = true;
        await InvokeAsync(StateHasChanged);
    }

    class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [MinLength(8)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    class RegisterModel2
    {
        [Required(AllowEmptyStrings = false)]
        [Length(5, 25)]
        [RegularExpression(@"^[a-z0-9_-]+$")]
        public string Username { get; set; } = string.Empty;

        [Required(AllowEmptyStrings = false)]
        public string FullName { get; set; } = string.Empty;

        public DateTime Birthday { get; set; } = DateTime.UtcNow;
    }

    class OTCModel
    {
        [Required]
        [Length(6, 6)]
        public string OTC { get; set; } = string.Empty;
    }
}