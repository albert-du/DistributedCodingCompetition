@page "/auth/register"
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject IEmailService EmailService
@using DistributedCodingCompetition.ApiService.Models

<PageTitle>Register</PageTitle>

@if (loading)
{
    @*TODO show spinner or something in future*@
    <h3>Loading...</h3>
}
else if (otc is null)
{

    <EditForm Model=model OnValidSubmit=SubmitAsync FormName="Registration">
        <label>
            Email
            <InputText id="username" type="email" @bind-Value=model.Email />
            <ValidationMessage For=@(() => model.Email) />
        </label>

        <label>
            Password
            <InputText type="password" @bind-Value=model.Password />
            <ValidationMessage For=@(() => model.Password) />
        </label>

        <label>
            Confirm Password
            <InputText type="password" @bind-Value=model.ConfirmPassword />
            <ValidationMessage For=@(() => model.ConfirmPassword) />
        </label>

        <button type="submit">Submit</button>

        <div class="text-rose-500">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
    </EditForm>
}
else if (!otcValid)
{
    <h3>Enter the verification code sent to your email</h3>
    <InputText @bind-Value=otcREAL />
    <button @onclick=SubmitAsync2>Submit</button>
}
else
{
    // otc is correct
    <EditForm Model=model2 OnValidSubmit=SubmitAsync3 FormName="UserDetails">
        <label>
            Name
            <InputText @bind-Value=model2.Username />
            <ValidationMessage For=@(() => model2.Username) />
        </label>

        <label>
            Birthday
            <InputDate @bind-Value=model2.Birthday />
            <ValidationMessage For=@(() => model2.Birthday) />
        </label>

        <button type="submit">Submit</button>

        <div class="text-rose-500">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
    </EditForm>
}

@code {
    [CascadingParameter]
    public ConnectionDetails? ConnectionDetails { get; set; }


    [Parameter]
    public string? ReturnUrl { get; set; }

    private RegisterModel model = new();
    private RegisterModel2 model2 = new();

    string? otc = null;
    DateTime otcGenTime;
    string otcREAL = string.Empty;
    bool otcValid;
    bool resendEnabled;
    string? error = null;

    private bool loading;

    private async Task SubmitAsync()
    {
        error = null;
        if (!await ApiService.TryUserByEmailAsync(model.Email, out var user))
            // req failed
            return;

        if (user is not null)
        {
            // email already in use
            // throws exn if email is already in use

            // redirect to login page
            if (ReturnUrl is not null)
                NavigationManager.NavigateTo("/auth/login?returnUrl=" + ReturnUrl);
            else
                NavigationManager.NavigateTo("/auth/login");
            return;
        }
        await SendOTCAsync();
    }

    private async Task SubmitAsync2()
    {
        error = null;
        loading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000); // avoid spam
        otcValid = otc is not null && otc != otcREAL;
        if (!otcValid)
            error = "Invalid Code.";
        await InvokeAsync(StateHasChanged);
    }

    private async Task SubmitAsync3()
    {
        error = null;
        var id = await AuthService.TryRegisterAsync(model.Email, model.Password);
        if (id is null)
        {
            error = "Failed to register.";
            return;
        }
        User user = new()
        {
            Id = id.Value,
            Email = model.Email,
            Username = model2.Username,
            Birthday = model2.Birthday
        };
        var success = await ApiService.TryCreateUser(user);
        if (!success)
        {
            error = "Failed to create user.";
            return;
        }

        // login
        var token = await AuthService.TryLoginAsync(model.Email, model.Password);

        // TODO cookie writing
    }

    private async Task SendOTCAsync()
    {
        otc = Utils.RandomOTC();
        await EmailService.SendEmailAsync(model.Email, "Verify your email", $"Your verification code is {otc}");
        _ = Wait30ThenEnableResend();
    }

    private async Task Wait30ThenEnableResend()
    {
        await Task.Delay(30000);
        resendEnabled = true;
        await InvokeAsync(StateHasChanged);
    }

    private class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [MinLength(8)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = "";
    }

    private class RegisterModel2
    {
        [Required(AllowEmptyStrings = false)]
        public string Username { get; set; } = "";

        public DateTime Birthday { get; set; } = DateTime.UtcNow;
    }
}

@*
    Registration Steps:
    1. Check email is not in use
    2. Validate email
    3. Get user profile information
    3. Create auth record in db
    4. Create user record in db
    5. Fetch login token
    6. Update login state
    7. Redirect to page
*@