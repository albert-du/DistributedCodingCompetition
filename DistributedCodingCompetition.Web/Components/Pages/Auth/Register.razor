@page "/auth/register"
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject IEmailService EmailService
@inject IJSRuntime JSRuntime
@using DistributedCodingCompetition.ApiService.Models
@attribute [AllowAnonymous]

<PageTitle>Register</PageTitle>

<div class="py-2 mx-auto align-middle border rounded-lg border-slate-200 w-96">
    <h2 class="py-2 text-2xl text-center">Register</h2>

    @if (loading)
    {
        @*TODO show spinner or something in future*@
        <h3>Loading...</h3>
    }
    else if (otc is null)
    {
        <EditForm class="flex flex-col items-center justify-center gap-y-5" Model=model OnValidSubmit=SubmitAsync
            FormName="Registration">
            <label class="flex flex-col">
                <div class="pl-2">
                    Email
                </div>
                <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="username" type="email"
                    @bind-Value=model.Email placeholder="me@example.com" />
                <div class="h-2 text-rose-500">
                    <ValidationMessage For=@(() => model.Email) />
                </div>
            </label>

            <label class="flex flex-col">
                <div class="pl-2">
                    Password
                </div>
                <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password"
                    @bind-Value=model.Password />
                <div class="h-2 text-rose-500">
                    <ValidationMessage For=@(() => model.Password) />
                </div>
            </label>
            <label class="flex flex-col">
                <div class="pl-2">
                    Confirm Password
                </div>
                <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password"
                    @bind-Value=model.ConfirmPassword />
                <div class="h-2 text-rose-500">
                    <ValidationMessage For=@(() => model.ConfirmPassword) />
                </div>
            </label>

            <div class="flex justify-center">
                <button
                    class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                    type="submit">Submit</button>
            </div>

            <DataAnnotationsValidator />
        </EditForm>
    }
    else if (!otcValid)
    {
        <div class="flex flex-col items-center gap-y-2">
            <h3>Enter the verification code sent to your email</h3>
            <p class="italic">@model.Email</p>
            <InputText pattern="[0-9]{6}" placeholder="000000"
                class="w-20 px-2 py-1 my-2 ml-2 text-center bg-gray-100 rounded-lg text-slate-800" @bind-Value=otcREAL />
            <div class="flex justify-center py-3">
                <button
                    class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                    @onclick=SubmitAsync2>Submit</button>
            </div>
        </div>
    }
    else
    {
        // otc is correct
        <EditForm Model=model2 class="flex flex-col items-center justify-center gap-y-5" OnValidSubmit=SubmitAsync3
            FormName="UserDetails">
            <label class="flex flex-col">
                <div class="pl-2">
                    Name
                </div>
                <InputText placeholder="" class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model2.Username />
                <ValidationMessage For=@(() => model2.Username) />
            </label>

            <label class="flex flex-col">
                <div class="pl-2">
                    Birthday
                </div>
                <InputDate class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model2.Birthday />
                <ValidationMessage For=@(() => model2.Birthday) />
            </label>

            <div class="flex justify-center">
                <button
                    class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                    type="submit">Submit</button>
            </div>

            <DataAnnotationsValidator />
        </EditForm>
    }
    <div class="text-rose-500">
        @error
    </div>
</div>


@code {
    [CascadingParameter]
    public ConnectionDetails? ConnectionDetails { get; set; }


    [Parameter]
    public string? ReturnUrl { get; set; }

    private RegisterModel model = new();
    private RegisterModel2 model2 = new();

    string? otc = null;
    DateTime otcGenTime;
    string otcREAL = string.Empty;
    bool otcValid;
    bool resendEnabled;
    string? error = null;

    private bool loading;

    private async Task SubmitAsync()
    {
        error = null;
        (var success, var user) = await ApiService.TryUserByEmailAsync(model.Email);
        if (!success)
            // req failed
            return;

        if (user is not null)
        {
            // email already in use
            // throws exn if email is already in use

            // redirect to login page
            if (ReturnUrl is not null)
                NavigationManager.NavigateTo("/auth/login?returnUrl=" + ReturnUrl);
            else
                NavigationManager.NavigateTo("/auth/login");
            return;
        }
        await SendOTCAsync();
    }

    private async Task SubmitAsync2()
    {
        error = null;
        loading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000); // avoid spam
        loading = false;
        otcValid = otc is not null && otc == otcREAL;
        if (!otcValid)
            error = "Invalid Code.";
        await InvokeAsync(StateHasChanged);
    }

    private async Task SubmitAsync3()
    {
        error = null;
        var id = await AuthService.TryRegisterAsync(model.Email, model.Password);
        if (id is null)
        {
            error = "Failed to register.";
            return;
        }
        User user = new()
            {
                Id = id.Value,
                Email = model.Email,
                Username = model2.Username,
                Birthday = model2.Birthday
            };
        var success = await ApiService.TryCreateUserAsync(user);
        if (!success)
        {
            error = "Failed to create user.";
            return;
        }

        // login
        var res = await AuthService.TryLoginAsync(id.Value, model.Password, ConnectionDetails?.UserAgent ?? "Unknown", ConnectionDetails?.IpAddress ?? "Unknown");
        if (res is null)
        {
            error = "Failed to login.";
            return;
        }

        var code = await JSRuntime.InvokeAsync<int>("post", $"htau/login?token={Uri.EscapeDataString(res.Token)}");

        if (code != 200)
        {
            error = "Failed to login.";
            return;
        }

        if (ReturnUrl is not null)
            NavigationManager.NavigateTo(ReturnUrl);
        else
            NavigationManager.NavigateTo("/");
    }

    private async Task SendOTCAsync()
    {
        otc = Utils.RandomOTC();
        await EmailService.SendEmailAsync(model.Email, "Verify your email", $"Your verification code is {otc}");
        _ = Wait30ThenEnableResend();
    }

    private async Task Wait30ThenEnableResend()
    {
        await Task.Delay(30000);
        resendEnabled = true;
        await InvokeAsync(StateHasChanged);
    }

    private class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [MinLength(8)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = "";
    }

    private class RegisterModel2
    {
        [Required(AllowEmptyStrings = false)]
        public string Username { get; set; } = "";

        public DateTime Birthday { get; set; } = DateTime.UtcNow;
    }
}

@*
Registration Steps:
1. Check email is not in use
2. Validate email
3. Get user profile information
3. Create auth record in db
4. Create user record in db
5. Fetch login token
6. Update login state
7. Redirect to page
*@