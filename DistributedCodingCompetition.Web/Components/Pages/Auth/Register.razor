@page "/auth/register"
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject IApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

@if (loading)
{
    @*TODO show spinner or something in future*@
    <h3>Loading...</h3>
}
else
{

}

<EditForm Model=model OnValidSubmit=SubmitAsync FormName="Registration">
    <label>
        Email
        <InputText id="username" type="email" @bind-Value=model.Email />
        <ValidationMessage For=@(() => model.Email) />
    </label>

    <label>
        Password
        <InputText type="password" @bind-Value=model.Password />
        <ValidationMessage For=@(() => model.Password) />
    </label>

    <label>
        Confirm Password
        <InputText type="password" @bind-Value=model.ConfirmPassword />
        <ValidationMessage For=@(() => model.ConfirmPassword) />
    </label>

    <button type="submit">Submit</button>

    <div class="text-rose-500">
        <DataAnnotationsValidator />
        <ValidationSummary />
    </div>
</EditForm>

@code {
    [Parameter]
    public string? ReturnUrl { get; set; }

    private RegisterModel model = new();

    string otc = Utils.RandomOTC();

    private bool loading;

    private class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [MinLength(8)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = "";
    }

    private async Task SubmitAsync()
    {
        if (!await ApiService.TryUserByEmailAsync(model.Email, out var user))
            // req failed
            return;

        if (user is not null)
        {
            // email already in use
            // throws exn if email is already in use

            // redirect to login page
            if (ReturnUrl is not null)
                NavigationManager.NavigateTo("/auth/login?returnUrl=" + ReturnUrl);
            else
                NavigationManager.NavigateTo("/auth/login");
            return;
        }

        // EMAIL NOT TAKEN

        // validate email

        var result = await AuthService.TryRegister(model.Email, model.Password);
        if (!result.HasValue)
            return;


    }
}


@*
    Registration Steps:
    1. Check email is not in use
    2. Validate email
    3. Get user profile information
    3. Create auth record in db
    4. Create user record in db
    5. Fetch login token
    6. Update login state
    7. Redirect to page
*@