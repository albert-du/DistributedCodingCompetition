@*
    View a contest from a participant's perspective
*@
@page "/contest/{id:guid}"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject IModalService ModalService
@inject ITimeZoneProvider TimeZoneProvider
<AuthCheck Contest=Id />

@if (contest is null)
{
    <LoadingSpinner />
}
else
{
    <h1 class="mb-4 text-3xl">@contest.Name</h1>
    @* Render HTML *@
    <article class="p-2 prose border-2 rounded-md border-slate-400 min-h-96">
        @((MarkupString)contest.RenderedDescription)
    </article>

    @if (!contest.Active)
    {
        <div class="">This contest is not active</div>
    }
    else if (open)
    {
        <div>This contest is now open</div>
        <a href="contest/@Id/solve" class="w-fit p-2 rounded-xl text-emerald-500 border border-emerald-500 hover:text-white hover:bg-emerald-500 active:bg-emerald-600 transition-colors duration-100">Start Solving Problems</a>
    }
    else
    {
        <div>This contest is not open</div>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    Contest? contest;

    bool open;

    protected override async Task OnInitializedAsync()
    {
        var (success, c) = await ApiService.TryReadContestAsync(Id);

        if (!success || c is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }
        contest = c;
        open = contest.StartTime < DateTime.UtcNow && contest.EndTime > DateTime.UtcNow;
    }
}