@page "/contest/{contestId:guid}/solve/{problemId:guid}/submissions"
@inject IApiService ApiService
@inject IModalService ModalService
@inject ITimeZoneProvider TimeZoneProvider
@inject IUserStateService UserStateService

<AuthCheck Contest=ContestId />

<PageTitle>@problemName Submissions</PageTitle>

<h1 class="text-3xl">@problemName Submissions</h1>
<h2 class="text-2xl">@contestName</h2>
<p>Submissions for @username</p>
<a class="italic hover:underline text-violet-800" href="contest/@ContestId/solve/@ProblemId">Back to problem</a>

<div class="flex flex-col gap-y-1">
    @foreach (var submission in submissions)
    {
        <div>
            <div class="flex justify-between">
                <div>@submission.Language</div>
                <div>@submission.SubmissionTime.Add(-tzOffset).ToString("yyyy-MM-dd HH:mm:ss")</div>
            </div>
            <div class="border p-2 h-32">
                <CodeEditor ReadOnly Language=@(submission.Language.Split('=').FirstOrDefault()??"text") Code=@submission.Code />
            </div>
            <div>
                <div>Testcases: @submission.PassedTestCases out of @submission.TotalTestCases</div>
                <div>Score: @submission.Score out of @submission.MaxPossibleScore</div>
                <div>Points: @submission.Points</div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid ContestId { get; set; }

    [Parameter]
    public Guid ProblemId { get; set; }

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    [SupplyParameterFromQuery]
    public int PageSize { get; set; } = 50;

    string contestName = string.Empty;
    string problemName = string.Empty;
    string username = string.Empty;

    TimeSpan tzOffset;

    IReadOnlyList<Submission> submissions = [];

    protected override async Task OnInitializedAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            ModalService.ShowError("Failed to load user", "Internal error");
            return;
        }
        username = user.Username;

        var (success, contest) = await ApiService.TryReadContestAsync(ContestId);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        contestName = contest.Name;

        var (success2, problem) = await ApiService.TryReadProblemAsync(ProblemId);
        if (!success2 || problem is null)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            return;
        }
        problemName = problem.Name;
        var (success3, subs) = await ApiService.TryReadUserProblemSubmissionsAsync(ContestId, ProblemId, user.Id, Page, PageSize);
        if (!success3 || subs is null)
        {
            ModalService.ShowError("Failed to load submissions", "Internal error");
            return;
        }
        submissions = subs;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tzOffset = await TimeZoneProvider.GetTimeZoneOffsetAsync();
            await InvokeAsync(StateHasChanged);
        }
    }
}
