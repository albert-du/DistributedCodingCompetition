@page "/contest/{id:guid}/manage/points"
@inject IModalService ModalService
@inject IApiService ApiService

<AuthCheck Contest=Id Admin />

<PageTitle>Contest Points</PageTitle>

@if (contest is null)
{
    <h1>Not found</h1>
}
else
{
    <h1>@contest.Name points</h1>
    <a class="text-violet-500 italic hover:underline" href="contest/@Id/manage">back</a>

    @foreach (var prob in problems)
    {
        <div class="flex gap-x-2">
            <div>@prob.Name</div>
            @if (points.TryGetValue(prob.Id, out var ppv))
            {
                <div>Points set to: @ppv</div>
                <div><button @onclick="() => SetPoints(prob)">Change points</button></div>
            }
            else
            {
                <div>Points not set</div>
                <div>defaulting to: @contest.DefaultPointsForProblem</div>
                <div><button @onclick="() => SetPoints(prob)">Set points</button></div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    IReadOnlyDictionary<Guid, int> points = new Dictionary<Guid, int>();

    IReadOnlyList<Problem> problems = [];

    Contest? contest;

    protected override async Task OnInitializedAsync()
    {
        (var success, contest) = await ApiService.TryReadContestAsync(Id);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        var (success2, probs) = await ApiService.TryReadContestProblemsAsync(Id);
        if (!success2 || probs is null)
        {
            ModalService.ShowError("Failed to load problems", "Internal error");
            return;
        }
        problems = probs;

        var (success3, ppvs) = await ApiService.TryReadContestProblemPointValues(Id);
        if (!success3 || ppvs is null)
        {
            ModalService.ShowError("Failed to load points", "Internal error");
            return;
        }
        points = ppvs.ToFrozenDictionary(x => x.Id, x => x.Points);
    }

    void SetPoints(Problem prob)
    {
        ModalService.AskInteger("Set points", "Enter points", 0, 100, async (value) =>
        {
            if (value is null)
                return;

            var success = await ApiService.TrySetContestProblemPointValueAsync(Id, prob.Id, value.Value);
            if (!success)
                ModalService.ShowError("Failed to set points", "Internal error");
            else
                points = points.SetItem(prob.Id, value.Value);
        });
    }
}