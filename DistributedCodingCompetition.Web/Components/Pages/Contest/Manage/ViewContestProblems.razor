@page "/contest/{id:guid}/solve"
@inject IApiService ApiService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ITimeZoneProvider TimeZoneProvider
@rendermode InteractiveServer
<AuthCheck Contest=Id />

@if (contest is null)
{
    <div>Loading...</div>
}
else
{
    <h1 class="mb-2 text-3xl">Problem Set</h1>
    <h1 class="mb-4 text-2xl">@contest.Name</h1>

    @if (!contest.Active)
    {
        <div class="">This contest is not active</div>
    }
    else if (open)
    {
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            @foreach (var problem in contest.Problems)
            {
                <div class="bg-white shadow-md rounded-lg p-4">
                    <h2 class="text-xl font-semibold">@problem.Name</h2>
                    <p class="text-gray-600">@problem.Description</p>
                    <div class="mt-4">
                        <a class="text-blue-500" href="/contest/@contest.Id/solve/@problem.Id">Solve</a>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div>This contest is not open</div>
    }
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    Contest? contest;

    bool open;

    protected override async Task OnInitializedAsync()
    {
        var (success, contest) = await ApiService.TryReadContestAsync(Id);

        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }

        open = contest.StartTime < DateTime.UtcNow && contest.EndTime > DateTime.UtcNow;
    }
}
