@*
    Todo Finish Implement/Test
*@

@page "/contest/{id:guid}/manage/transfer"
@inject IApiService ApiService
@inject IModalService ModalService
@inject IUserStateService UserStateService
@inject NavigationManager NavigationManager
<AuthCheck Contest=Id Admin />

<PageTitle>Transfer Contest Ownership</PageTitle>

<h1 class="">Transfer Ownership of @(contest?.Name ?? "Unknown")</h1>
@if (contest is not null)
{
    <div>Confirm this the contest you want to transfer, type the name of the contest</div>
    <input type="text" @bind="sanity" />

    <h2>Select New Owner</h2>
    <ul class="flex flex-col gap-y-2">
        @foreach (var admin in administrators)
        {
            <button @onclick="() => SelectAdmin(admin)" class="flex bg-">
                <div>
                    @($"@{admin.Username}")
                </div>
                <div>
                    @admin.FullName
                </div>
            </button>
        }
    </ul>
    @if (newOwner is not null && sanity.Equals(contest.Name, StringComparison.OrdinalIgnoreCase))
    {
        <div class="flex flex-col gap-y-4">
            <div>The new owner of @contest.Name will be @newOwner.Username</div>
            <button @onclick=TransferOwnershipAsync>Transfer Ownership</button>
        </div>
    }
    else
    {
        <div>select a new owner above</div>
    }
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    Contest? contest;

    string sanity = string.Empty;

    List<User> administrators = [];

    User? newOwner;

    protected override async Task OnInitializedAsync()
    {
        (var success, contest) = await ApiService.TryReadContestAsync(Id);
        if (!success)
        {
            ModalService.ShowError("Failed to load contest", "");
            return;
        }
        if (contest is null)
        {
            ModalService.ShowError("Contest not found", "");
            return;
        }
        var thisUser = await UserStateService.UserAsync();
        if (thisUser is null)
        {
            ModalService.ShowError("User not found", "");
            return;
        }
        if (contest.OwnerId != thisUser.Id)
        {
            ModalService.ShowError("You are not the owner of this contest", "");
            NavigationManager.NavigateTo("dashboard");
            return;
        }
        (_, var admins) = await ApiService.TryReadContestAdminsAsync(Id);
        administrators = [.. admins];
    }

    void SelectAdmin(User admin)
    {
        newOwner = admin;
    }

    bool submitted;
    async Task TransferOwnershipAsync()
    {
        if (submitted)
            return;
        submitted = true;
        var oldOwner = contest!.Owner;
        contest.OwnerId = newOwner!.Id;
        var success = await ApiService.TryUpdateContestAsync(contest);
    }
}