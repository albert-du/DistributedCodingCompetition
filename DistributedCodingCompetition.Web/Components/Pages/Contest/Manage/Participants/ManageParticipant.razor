@page "/contest/{contestId:guid}/manage/participants/{participantId:guid}"
@inject IModalService ModalService
@inject IApiService ApiService
@rendermode InteractiveServer

<AuthCheck Contest=ContestId Admin />

<PageTitle>Manage Participant</PageTitle>

<h1 class="text-3xl">@($"{participant?.FullName} @{participant?.Username}") </h1>
<h2 class="text-2xl">Participant</h2>

<div>This account was created: @participant?.Creation.ToShortDateString()</div>

<div>
    <h2>Contests</h2>
    <ul>
        @foreach (var submission in submissions)
        {
            <div>
            </div>
        }
    </ul>
    <div>
        <button @onclick="() => page--" enabled="@(page > 1)">Last</button>
        <button @onclick="() => page++" enabled="@(submissions.Count > 0)">Next</button>
    </div>
</div>

@code {
    [Parameter]
    public Guid ContestId { get; set; }

    [Parameter]
    public Guid ParticipantId { get; set; }

    Contest? contest;
    User? participant;

    IReadOnlyList<Submission> submissions = [];

    int page = 1;

    protected override async Task OnInitializedAsync()
    {
        (var success, contest) = await ApiService.TryReadContestAsync(ContestId);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        (success, participant) = await ApiService.TryReadUserAsync(ParticipantId);
        if (!success || participant is null)
        {
            ModalService.ShowError("Failed to load participant", "Internal error");
            return;
        }

        (success, var subs) = await ApiService.TryReadUserContestSubmissionsAsync(ContestId, participant.Id, page, 50);
        if (!success || subs is null)
        {
            ModalService.ShowError("Failed to load submissions", "Internal error");
            return;
        }

        submissions = subs;
    }
}