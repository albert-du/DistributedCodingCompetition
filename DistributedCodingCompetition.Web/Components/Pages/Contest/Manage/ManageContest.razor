@*
    Manage a contest
*@
@page "/contest/{id:guid}/manage"
@inject IUserStateService UserStateService
@inject IApiService ApiService
@inject IMarkdownRenderService MarkdownRenderService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ITimeZoneProvider TimeZoneProvider
@rendermode InteractiveServer

<AuthCheck Contest=Id Admin />

<PageTitle>@contest?.Name</PageTitle>

@if (contest is null || model is null)
{
    <LoadingSpinner />
}
else
{
    <h1 class="text-3xl">@(model.Name)</h1>
    <h2 class="font-mono">@(contest.Id)</h2>
    <div>Owner: @ownerName</div>

    <div class="flex justify-between">
        <EditForm Model=model OnValidSubmit="SubmitAsync" class="flex flex-col w-1/2 gap-y-2">
            <label class="flex flex-col">
                <div class="pl-2">
                    Name
                </div>
                <InputText class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="Name" @bind-Value=model.Name />
            </label>

            <label class="flex flex-col">
                <div class="pl-2">
                    Description (<a href="https://www.markdownguide.org/" class="italic hover:underline">markdown</a> enabled)
                </div>
                <InputTextArea class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg min-h-96 text-slate-800" id="Description" @bind-Value=model.Description />
            </label>

            <label>
                <div class="pl-2">
                    Minimum Age
                </div>
                <InputNumber class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="MinimumAge" @bind-Value=model.MinimumAge />
            </label>

            <label>
                <div class="pl-2">
                    Public
                    <div class="text-xs">
                        show on homepage, opens registration without invitation
                    </div>
                </div>
                <InputCheckbox class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="Public" @bind-Value=model.Public />
            </label>

            <label>
                <div class="pl-2">
                    Open
                    <div class="text-xs">
                        Accepting new participants
                    </div>
                </div>
                <InputCheckbox class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="Open" @bind-Value=model.Open />
            </label>

            <label>
                <div class="pl-2">
                    Active
                    <div class="text-xs">
                        Uncheck to archive contest.
                    </div>
                </div>
                <InputCheckbox class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="Active" @bind-Value=model.Active />
            </label>

            <div class="flex justify-between">
                <label class="flex flex-col w-1/2">
                    <div class="pl-2">
                        Start Date
                    </div>
                    <InputDate class="w-48 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Date" id="StartTime" @bind-Value=model.StartDate />
                </label>

                <label class="flex flex-col w-1/2">
                    <div class="pl-2">
                        Start Time
                    </div>
                    <InputDate class="w-48 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Time" id="StartTime" @bind-Value=model.StartTime />
                </label>
            </div>
            <div class="flex justify-between">
                <label class="flex flex-col w-1/2">
                    <div class="pl-2">
                        End Date
                    </div>
                    <InputDate class="w-48 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Date" id="StartTime" @bind-Value=model.EndDate />
                </label>

                <label class="flex flex-col w-1/2">
                    <div class="pl-2">
                        End Time
                    </div>
                    <InputDate class="w-48 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Time" id="StartTime" @bind-Value=model.EndTime />
                </label>
            </div>

            <div class="flex flex-col">
                <div class="pl-2">
                    Duration
                </div>
                <div class="w-64 px-2 py-1 ml-2 rounded-lg bg-gray-50 text-slate-800">
                    @model.Duration.Days days, @model.Duration.Hours hours, @model.Duration.Minutes minutes
                </div>
            </div>

            <div class="flex flex-col">
                <div class="pl-2">
                    Starts in
                </div>
                <div class="w-64 px-2 py-1 ml-2 rounded-lg bg-gray-50 text-slate-800">
                    @Remaining.Days days, @Remaining.Hours hours, @Remaining.Minutes minutes
                </div>

                <div>
                    From @StartUTC UTC to @EndUTC UTC
                </div>
            </div>

            <div class="flex flex-col">
                @if (Remaining < TimeSpan.Zero)
                {
                    <div class="text-red-500">
                        Contest has already started
                    </div>
                }
                else if (Remaining < TimeSpan.FromHours(1))
                {
                    <div class="text-red-500">
                        Contest starts soon
                    </div>
                }
                else if (Remaining < TimeSpan.FromDays(1))
                {
                    <div class="text-yellow-500">
                        Contest starts tomorrow
                    </div>
                }
                else if (Remaining < TimeSpan.FromDays(7))
                {
                    <div class="text-yellow-500">
                        Contest starts in a week
                    </div>
                }
                else if (Remaining < TimeSpan.FromDays(30))
                {
                    <div class="text-yellow-500">
                        Contest starts in a month
                    </div>
                }
                else if (Remaining < TimeSpan.FromDays(365))
                {
                    <div class="text-yellow-500">
                        Contest starts in a year
                    </div>
                }
                else
                {
                    <div class="text-green-500">
                        Contest starts in more than a year
                    </div>
                }
            </div>


            <button type="submit" class="px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700">Save</button>
            <DataAnnotationsValidator />
            <div class="text-rose-500">
                <ValidationSummary />
            </div>
        </EditForm>
        <div class="flex flex-col items-center w-1/2">
            <div class="flex flex-col gap-y-1">
                <div class="px-2 py-4">
                    <h3 class="text-semibold">Administrators</h3>
                    <div class="flex flex-col px-1 rounded-lg gap-y-1 bg-violet-200 text-slate-600">
                        @foreach (var admin in administrators)
                        {
                            <div>@($"@{admin.Username} {admin.FullName}")</div>
                        }
                    </div>
                    <a href="contest/@Id/manage/administrators" class="italic hover:underline">Edit administrators</a>
                </div>
                <div class="px-2 py-4">
                    <h3 class="text-semibold">Participants</h3>
                    <div>
                        Showing @participants.Count participants<br />page @participantsPage
                    </div>
                    <div class="flex flex-col px-1 bg-indigo-200 rounded-lg gap-y-1 text-slate-600">
                        @if (participants.Count == 0)
                        {
                            <div>No participants</div>
                        }
                        else
                        {
                            @foreach (var participant in participants)
                            {
                                <div>@($"@{participant.Username} {participant.FullName}")</div>
                            }
                        }
                    </div>
                    <div class="flex w-32">
                        <button class="px-2 py-1 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700" @onclick=LastParticipantAsync>Previous</button>
                        <button class="px-2 py-1 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700" @onclick=NextParticipantAsync>Next</button>
                    </div>
                    <a href="contest/@Id/manage/administrators" class="italic hover:underline">Edit participants</a>
                </div>

                <div class="px-2 py-4">
                    <h3 class="text-semibold">Banned</h3>
                    <div>
                        Showing @banned.Count banned users<br />page @bannedPage
                    </div>
                    <div class="flex flex-col px-1 rounded-lg gap-y-1 bg-rose-200 text-slate-600">
                        @if (banned.Count == 0)
                        {
                            <div>No banned users</div>
                        }
                        else
                        {
                            @foreach (var ban in banned)
                            {
                                <div>@($"@{ban.Username} {ban.FullName}")</div>
                            }
                        }
                    </div>
                    <div class="flex w-32">
                        <button class="px-2 py-1 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700" @onclick=LastBannedAsync>Previous</button>
                        <button class="px-2 py-1 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700" @onclick=NextBannedAsync>Next</button>
                    </div>
                    <a href="contest/@Id/manage/participants/banned" class="italic hover:underline">Banned users</a>
                </div>
            </div>
        </div>

    </div>
    <div>
        <div class="flex flex-col gap-y-1">
            <h2 class="text-2xl" id="invites">Invites</h2>
            <div class="flex flex-wrap w-full gap-1 px-1 my-2 bg-purple-200 rounded-lg text-slate-600">
                @if (joinCodes.Count == 0)
                {
                    <div>No invites</div>
                }
                else
                {
                    @foreach (var cod in joinCodes)
                    {
                        <div class="flex gap-x-4">
                            @if (cod.Admin)
                            {
                                <div class="p-1 text-slate-300 bg-rose-500">ADMIN CODE</div>
                            }
                            <div>@cod.Name</div>
                            <a href="join/@cod.Code"></a>
                            <div>Uses: @cod.Uses</div>
                        </div>
                    }
                }
            </div>
            <a href="contest/@Id/manage/invites" class="italic hover:underline">Manage invites</a>
        </div>
        <div class="flex flex-col gap-y-1">
            <h2 class="text-2xl">Problems</h2>
            <div class="flex flex-wrap w-full gap-1 px-1 my-2 bg-blue-200 rounded-lg text-slate-600">
                @if (problems.Count == 0)
                {
                    <div>No Problems</div>
                }
                else
                {
                    @foreach (var prob in problems)
                    {
                        <div class="flex gap-x-4">
                            <div>@prob.Name</div>
                            <div>@prob.Difficulty</div>
                            <div>@prob.Description</div>
                        </div>
                    }
                }
            </div>

            <a href="contest/@Id/manage/problems" class="italic hover:underline">Manage problems</a>
        </div>
        <a href="contest/@Id/manage/submissions" class="italic hover:underline">@model.Submissions submissions</a>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    // datetime offset calc
    DateTime StartUTC => model?.Start ?? DateTime.UtcNow - offset;
    DateTime EndUTC => model?.End ?? DateTime.UtcNow - offset;
    TimeSpan Remaining => StartUTC - DateTime.UtcNow;
    TimeSpan offset;

    // pagination values
    int participantsPage = 1;
    int bannedPage = 1;

    // stored values
    string ownerName = string.Empty;
    Contest? contest;
    ContestModel? model;

    // lists
    IReadOnlyList<User> administrators = [];
    IReadOnlyList<User> participants = [];
    IReadOnlyList<User> banned = [];

    IReadOnlyList<JoinCode> joinCodes = [];
    IReadOnlyList<Problem> problems = [];

    // Pagination methods
    async Task LastParticipantAsync()
    {
        if (participantsPage > 1)
            participantsPage--;

        var (success, p) = await ApiService.TryReadContestParticipantsAsync(Id, 10, participantsPage);
        participants = p ?? [];
        if (!success)
            ModalService.ShowError("Failed to load participants", "Internal error");
    }

    async Task NextParticipantAsync()
    {
        participantsPage++;
        var (success, p) = await ApiService.TryReadContestParticipantsAsync(Id, 10, participantsPage);
        participants = p ?? [];
        if (!success)
            ModalService.ShowError("Failed to load participants", "Internal error");
    }

    async Task LastBannedAsync()
    {
        if (bannedPage > 1)
            bannedPage--;
        var (success, b) = await ApiService.TryReadContestBannedAsync(Id, 10, bannedPage);
        banned = b ?? [];
        if (!success)
            ModalService.ShowError("Failed to load participants", "Internal error");
    }

    async Task NextBannedAsync()
    {
        bannedPage++;
        var (success, b) = await ApiService.TryReadContestBannedAsync(Id, 10, bannedPage);
        banned = b ?? [];
        if (!success)
            ModalService.ShowError("Failed to load participants", "Internal error");
    }

    async Task SubmitAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            // shouldn't actually happen but just in case
            ModalService.ShowError("You are not logged in", "Please log in to manage the contest");
            return;
        }

        if (model is null || contest is null)
        {
            // Shouldn't actually happen but just in case
            ModalService.ShowError("Internal error", "Failed to load contest");
            return;
        }

        // Update from model.
        contest.Name = model.Name;
        contest.Description = model.Description;
        contest.RenderedDescription = MarkdownRenderService.Render(model.Description);
        contest.StartTime = (await TimeZoneProvider.GetUtcDateTimeAsync(model.StartDate.ToDateTime(model.StartTime))).UtcDateTime;
        contest.EndTime = (await TimeZoneProvider.GetUtcDateTimeAsync(model.EndDate.ToDateTime(model.EndTime))).UtcDateTime;
        contest.MinimumAge = model.MinimumAge;
        contest.Public = model.Public;
        contest.Open = model.Open;

        // Update contest
        if (!(await ApiService.TryUpdateContestAsync(contest)).Item1)
            ModalService.ShowError("Failed to update contest", "Internal error");
        else
            ModalService.ShowInfo("Contest saved", "Success");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        (var success, contest) = await ApiService.TryReadContestAsync(Id);
        if (!success || contest is null)
        {
            ModalService.ShowError("Internal error", "could not find contest");
            NavigationManager.NavigateTo("/");
            return;
        }

        (success, var owner) = await ApiService.TryReadUserAsync(contest.OwnerId);

        if (success && owner is not null)
            ownerName = owner.Username;

        offset = await TimeZoneProvider.GetTimeZoneOffsetAsync();

        // set model from contest
        model = new()
            {
                Name = contest.Name,
                Description = contest.Description,
                // adjust dates and times for local time
                StartDate = DateOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.StartTime)).UtcDateTime),
                EndDate = DateOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.EndTime)).UtcDateTime),
                StartTime = TimeOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.StartTime)).UtcDateTime),
                EndTime = TimeOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.EndTime)).UtcDateTime),
                MinimumAge = contest.MinimumAge,
                Administrators = contest.AdministratorsCount,
                Participants = contest.ParticipantsCount,
                Banned = contest.BannedCount,
                Submissions = contest.SubmissionsCount,
                Problems = contest.ProblemsCount,
                JoinCodes = contest.JoinCodesCount,
                Active = contest.Active,
                Public = contest.Public,
                Open = contest.Open
            };

        // send off change
        await InvokeAsync(StateHasChanged);

        // start timer
        using PeriodicTimer periodicTimer = new(TimeSpan.FromMinutes(1));
        while (await periodicTimer.WaitForNextTickAsync())
            await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            ModalService.ShowError("You are not logged in", "Please log in to manage the contest");
            return;
        }

        // fire off all requests
        var a = ApiService.TryReadContestAdminsAsync(Id);
        var p = ApiService.TryReadContestParticipantsAsync(Id, 10, participantsPage);
        var b = ApiService.TryReadContestBannedAsync(Id, 10, bannedPage);
        var j = ApiService.TryReadContestJoinCodesAsync(Id);
        var pr = ApiService.TryReadContestProblemsAsync(Id);

        // wait for all requests to finish and save
        (var success, var aa) = await ApiService.TryReadContestAdminsAsync(Id);
        if (!success) ModalService.ShowError("Failed to load administrators", "Internal error");
        (success, var pp) = await ApiService.TryReadContestParticipantsAsync(Id, 10, participantsPage);
        if (!success) ModalService.ShowError("Failed to load participants", "Internal error");
        (success, var bb) = await ApiService.TryReadContestBannedAsync(Id, 10, bannedPage);
        if (!success) ModalService.ShowError("Failed to load banned participants", "Internal error");
        (success, var jj) = await ApiService.TryReadContestJoinCodesAsync(Id);
        if (!success) ModalService.ShowError("Failed to load join codes", "Internal error");
        (success, var prr) = await ApiService.TryReadContestProblemsAsync(Id);
        if (!success) ModalService.ShowError("Failed to load problems", "Internal error");

        // save results
        administrators = aa ?? [];
        participants = pp ?? [];
        banned = bb ?? [];
        joinCodes = jj ?? [];
        problems = prr ?? [];
    }

    class ContestModel
    {
        [Required(AllowEmptyStrings = false)]
        public string Name { get; set; } = string.Empty;

        public string Description { get; set; } = "# Description\n\n## Rules\n\n## Prizes\n\n## Scoring\n\n## Submission\n\n## Judging\n\n## FAQ\n\n";

        /// <summary>
        /// Local start date
        /// </summary>
        [Required]
        public DateOnly StartDate { get; set; }

        /// <summary>
        /// Local end date
        /// </summary>
        [Required]
        public DateOnly EndDate { get; set; }

        /// <summary>
        /// Local start time
        /// </summary>
        [Required]
        public TimeOnly StartTime { get; set; }

        /// <summary>
        /// Local end time
        /// </summary>
        [Required]
        public TimeOnly EndTime { get; set; }

        public int MinimumAge { get; set; }

        public int Administrators { get; set; }
        public int Participants { get; set; }
        public int Banned { get; set; }
        public int Submissions { get; set; }

        public int Problems { get; set; }
        public int JoinCodes { get; set; }

        public bool Active { get; set; }
        public bool Public { get; set; }
        public bool Open { get; set; }

        public DateTime Start => StartDate.ToDateTime(StartTime);
        public DateTime End => EndDate.ToDateTime(EndTime);
        public TimeSpan Duration => End - Start;
    }

    record UserModel(string Username, Guid id);
}
