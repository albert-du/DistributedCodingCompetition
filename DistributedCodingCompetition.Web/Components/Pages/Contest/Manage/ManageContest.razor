@*
// show
    public Guid Id { get; set; }
    public User Owner { get; set; } = null!;

    counts:
        public ICollection<Problem> Problems { get; set; } = [];
        public ICollection<User> Participants { get; set; } = [];
        public ICollection<User> Administrators { get; set; } = [];
        public ICollection<User> Banned { get; set; } = [];
        public ICollection<Submission> Submissions { get; set; } = [];
        public ICollection<JoinCode> JoinCodes { get; set; } = [];

// edit
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
        public string RenderedDescription { get; set; } = string.Empty;
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public bool Active { get; set; } = true;
    public bool Public { get; set; }
    public bool Open { get; set; }
    public int MinimumAge { get; set; }
*@

@page "/contest/{id:guid}/manage"
@inject ITimeZoneProvider TimeZoneProvider
@inject IUserStateService UserStateService
@inject IApiService ApiService
@inject IMarkdownRenderService MarkdownRenderService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ITimeZoneProvider TimeZoneProvider
<AuthCheck />

@if (contest is not null && model is not null)
{
    <h1>@(model.Name)</h1>
    <h2>@(contest.Id)</h2>
    <EditForm Model=model OnValidSubmit="SubmitAsync">
        <label class="flex flex-col">
            <div class="pl-2">
                Name
            </div>
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="Name" @bind-Value=(model.Name) />
        </label>

        <label class="flex flex-col">
            <div class="pl-2">
                Description (<a href="https://www.markdownguide.org/" class="italic hover:underline">markdown</a> enabled)
            </div>
            <InputTextArea class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" id="Description" @bind-Value=model.Description />
        </label>

        <label class="flex flex-col">
            <div class="pl-2">
                Start Date
            </div>
            <InputDate class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Date" id="StartTime" @bind-Value=model.StartDate />
        </label>

        <label class="flex flex-col">
            <div class="pl-2">
                Start Time
            </div>
            <InputDate class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Time" id="StartTime" @bind-Value=model.StartTime />
        </label>

        <label class="flex flex-col">
            <div class="pl-2">
                End Date
            </div>
            <InputDate class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Date" id="StartTime" @bind-Value=model.EndDate />
        </label>

        <label class="flex flex-col">
            <div class="pl-2">
                End Time
            </div>
            <InputDate class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" Type="InputDateType.Time" id="StartTime" @bind-Value=model.EndTime />
        </label>

        <div class="flex flex-col">
            <div class="pl-2">
                Duration
            </div>
            <div class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800">
                @model.Duration
            </div>
        </div>

        <div class="flex flex-col">
            <div class="pl-2">
                Starts in
            </div>
            <div class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800">
                @Remaining
            </div>

            <div>
                From @StartUTC UTC to @EndUTC UTC
            </div>

            @if (Remaining < TimeSpan.Zero)
            {
                <div class="text-red-500">
                    Contest has already started
                </div>
            }
            else if (Remaining < TimeSpan.FromHours(1))
            {
                <div class="text-red-500">
                    Contest starts soon
                </div>
            }
            else if (Remaining < TimeSpan.FromDays(1))
            {
                <div class="text-yellow-500">
                    Contest starts tomorrow
                </div>
            }
            else if (Remaining < TimeSpan.FromDays(7))
            {
                <div class="text-yellow-500">
                    Contest starts in a week
                </div>
            }
            else if (Remaining < TimeSpan.FromDays(30))
            {
                <div class="text-yellow-500">
                    Contest starts in a month
                </div>
            }
            else if (Remaining < TimeSpan.FromDays(365))
            {
                <div class="text-yellow-500">
                    Contest starts in a year
                </div>
            }
            else
            {
                <div class="text-green-500">
                    Contest starts in more than a year
                </div>
            }
        </div>

        <a href="/contest/@Id/manage/administrators" class="italic hover:underline">@model.Administrators administrators</a>
        <a href="/contest/@Id/manage/participants" class="italic hover:underline">@model.Participants participants</a>
        <a href="/contest/@Id/manage/banned" class="italic hover:underline">@model.Banned users banned</a>
        <a href="/contest/@Id/manage/problems" class="italic hover:underline">@model.Problems problems</a>
        <a href="/contest/@Id/manage/submissions" class="italic hover:underline">@model.Submissions submissions</a>
        <a href="/contest/@Id/manage/invites" class="italic hover:underline">@model.JoinCodes invites</a>

        <button type="submit" class="px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg">Submit</button>
        <DataAnnotationsValidator />
    </EditForm>
}
else
{
    <div>
        Loading...
    </div>
}
@code {
    private DateTime StartUTC => model.Start - offset;
    private DateTime EndUTC => model.End - offset;
    private TimeSpan Remaining => StartUTC - DateTime.UtcNow;
    [Parameter]
    public Guid Id { get; set; }

    ContestModel model = new();
    Contest? contest;

    TimeSpan offset;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (contest is null)
            (var success, contest) = await ApiService.TryReadContestAsync(Id);

        if (contest is null)
        {
            ModalService.ShowError("Internal error", "could not find contest");
            NavigationManager.NavigateTo("/");
            return;
        }

        offset = await TimeZoneProvider.GetTimeZoneOffsetAsync();


        model = new()
            {
                Name = contest.Name,
                Description = contest.Description,
                StartDate = DateOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.StartTime)).UtcDateTime),
                EndDate = DateOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.EndTime)).UtcDateTime),
                StartTime = TimeOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.StartTime)).UtcDateTime),
                EndTime = TimeOnly.FromDateTime((await TimeZoneProvider.GetLocalDateTimeAsync(contest.EndTime)).UtcDateTime),
                MinimumAge = contest.MinimumAge,
                Administrators = contest.AdministratorsCount,
                Participants = contest.ParticipantsCount,
                Banned = contest.BannedCount,
                Submissions = contest.SubmissionsCount,
                Problems = contest.ProblemsCount,
                JoinCodes = contest.JoinCodesCount
            };
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
            return;

        (var success, contest) = await ApiService.TryReadContestAsync(Id);
        if (!success)
        {
            ModalService.ShowError("Internal error", "could not find contest");
            NavigationManager.NavigateTo("/");
            return;
        }

        if (contest is null || contest.Owner.Id != user.Id)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
    }

    private async Task SubmitAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
            return;

        if (model is null || contest is null)
            return;

        contest.Name = model.Name;
        contest.Description = model.Description;
        contest.StartTime = (await TimeZoneProvider.GetUtcDateTimeAsync(model.StartDate.ToDateTime(model.StartTime))).UtcDateTime;
        contest.EndTime = (await TimeZoneProvider.GetUtcDateTimeAsync(model.EndDate.ToDateTime(model.EndTime))).UtcDateTime;
    }

    class ContestModel
    {
        [Required(AllowEmptyStrings = false)]
        public string Name { get; set; } = string.Empty;

        public string Description { get; set; } = "# Description\n\n## Rules\n\n## Prizes\n\n## Scoring\n\n## Submission\n\n## Judging\n\n## FAQ\n\n";

        /// <summary>
        /// Local start date
        /// </summary>
        [Required]
        public DateOnly StartDate { get; set; }

        /// <summary>
        /// Local end date
        /// </summary>
        [Required]
        public DateOnly EndDate { get; set; }

        /// <summary>
        /// Local start time
        /// </summary>
        [Required]
        public TimeOnly StartTime { get; set; }

        /// <summary>
        /// Local end time
        /// </summary>
        [Required]
        public TimeOnly EndTime { get; set; }

        public int MinimumAge { get; set; }

        public int Administrators { get; set; }
        public int Participants { get; set; }
        public int Banned { get; set; }
        public int Submissions { get; set; }

        public int Problems { get; set; }
        public int JoinCodes { get; set; }

        public DateTime Start => StartDate.ToDateTime(StartTime);
        public DateTime End => EndDate.ToDateTime(EndTime);
        public TimeSpan Duration => End - Start;
    }

    record UserModel(string Username, Guid id);

}
