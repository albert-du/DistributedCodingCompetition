@*
    View all the submissions for a contest. This page is only accessible to contest admins.
*@
@page "/contest/{id:guid}/manage/submissions"
@inject IApiService ApiService
@inject IModalService ModalService
@inject IUserStateService UserStateService
@inject IJudgeService JudgeService

<AuthCheck Contest=Id Admin />

<PageTitle>@contest?.Name Submissions</PageTitle>

<h1 class="text-3xl">@contest?.Name Submissions</h1>

<table class="table-auto">
    <thead>
        <tr>
            <th>Time (UTC)</th>
            <th>Judged (UTC)</th>
            <th>Language</th>
            <th>Score</th>
            <th>Problem</th>
            <th>Problem</th>
            <th>Participant</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var submission in Submissions)
        {
            <tr>
                <td>@submission.SubmissionTime</td>
                <td>@submission.Language</td>
                <td>@submission.Score</td>
                <td>@submission.Problem</td>
                <td>@submission.EvaluationTime</td>
                <td>@submission.Problem</td>
                <td>@(submission.Submitter?.Username ?? "?username?")</td>
                <td><a href="submission/@submission.Id">View</a></td>
                @if (!judging.Contains(submission.Id))
                {
                    <td><button @onclick="() => RejudgeAsync(submission)">Rejudge</button></td>
                }
                else
                {
                    <td><button disabled>Rejudging...</button></td>
                }
                @if (submission.Invalidated)
                {
                    <td><button @onclick="() => RevalidateAsync(submission)">Revalidate</button></td>

                }
                else
                {
                    <td><button @onclick="() => InvalidateAsync(submission)">Invalidate</button></td>
                }
            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    [SupplyParameterFromQuery]
    public int PageSize { get; set; } = 10;

    List<Submission> Submissions = [];
    Contest? contest;
    HashSet<Guid> judging = [];

    protected override async Task OnInitializedAsync()
    {

        (var success, var c) = await ApiService.TryReadContestAsync(Id);
        if (!success)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }
        contest = c;

        await LoadAsync();
        // make sure the user is a contest admin
        var user = await UserStateService.UserAsync();
        var userId = user?.Id;
    }

    private async Task LoadAsync()
    {
        var sub = ApiService.TryReadContestSubmissionsAsync(Id, PageSize, Page);
        var cont = ApiService.TryReadContestAsync(Id);
        (var success, var submissions) = await sub;
        if (!success || submissions is null)
        {
            ModalService.ShowError("Failed to load submissions", "Internal error");
            return;
        }
        (success, contest) = await cont;

        if (!success)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        if (contest is null)
        {
            ModalService.ShowError("Contest not found", "");
            return;
        }

        Submissions = [.. submissions];
        Console.WriteLine($"Loaded {Submissions.Count} submissions");

    }

    async Task RejudgeAsync(Submission submission)
    {
        if (judging.Contains(submission.Id))
            return;

        judging.Add(submission.Id);

        try
        {
            var error = await JudgeService.JudgeAsync(submission.Id);
            if (error is not null)
                ModalService.ShowError(error, "Failed to judge submission");
            else
                await LoadAsync();
        }
        finally
        {
            judging.Remove(submission.Id);
        }
    }

    async Task InvalidateAsync(Submission submission)
    {
        submission.Invalidated = true;
        if (!await ApiService.TryUpdateSubmissionAsync(submission))
        {
            ModalService.ShowError("Failed to invalidate submission", "Internal error");
            submission.Invalidated = false;
        }
    }

    async Task RevalidateAsync(Submission submission)
    {
        submission.Invalidated = false;
        if (!await ApiService.TryUpdateSubmissionAsync(submission))
        {
            ModalService.ShowError("Failed to revalidate submission", "Internal error");
            submission.Invalidated = true;
        }
    }
}