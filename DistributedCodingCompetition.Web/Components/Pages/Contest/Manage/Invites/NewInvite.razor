@*
    Create a new invite join code for a contest.
*@
@page "/contest/{contestId:guid}/manage/invites/new"
@inject IApiService ApiService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject IUserStateService UserStateService

<AuthCheck Contest=ContestId Admin />

<PageTitle>New Invite</PageTitle>

<h1 class="text-2xl">Invite to @contestName</h1>

<EditForm Model=model OnValidSubmit=SubmitAsync>
    <label class="flex flex-col">
        <div class="pl-2">
            Code
        </div>
        <InputText id="Code" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model.Code />
    </label>
    <label class="flex flex-col">
        <div class="pl-2">
            Name
        </div>
        <InputText id="Name" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model.Name />
    </label>
    <label class="flex flex-col">
        <div class="pl-2">
            Days to Expire
        </div>
        <InputNumber id="DaysToExpire" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model.DaysToExpire />
    </label>
    <label class="flex gap-x-1">
        <div class="pl-2">
            Close After Use
        </div>
        <InputCheckbox id="CloseAfterUse" class="px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model.CloseAfterUse />
    </label>
    <button type="submit" class="px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700">Create</button>
    <DataAnnotationsValidator />
    <div class="text-rose-500">
        <ValidationSummary />
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid ContestId { get; set; }

    string contestName = string.Empty;
    JoinCodeModel model = new();

    protected override async Task OnInitializedAsync()
    {
        var (success, contest) = await ApiService.TryReadContestAsync(ContestId);
        if (!success || contest is null)
            ModalService.ShowError("Failed to load contest", "Internal error");
        else
            contestName = contest.Name;
    }

    async Task SubmitAsync()
    {
        if (await UserStateService.UserAsync() is not User user)
        {
            // shouldnt actually happen because of authcheck
            ModalService.ShowError("You are not logged in", "Please log in to create a join code");
            return;
        }
        JoinCode joinCode = new()
            {
                ContestId = ContestId,
                Code = model.Code,
                Name = model.Name,
                Creation = DateTime.UtcNow,
                Expiration = DateTime.UtcNow.AddDays(model.DaysToExpire),
                CloseAfterUse = model.CloseAfterUse,
                CreatorId = user.Id,
                Active = true,
            };

        var (success, id) = await ApiService.TryCreateJoinCodeAsync(joinCode);
        if (!success || id is null)
        {
            ModalService.ShowError("Failed to create join code", "Internal error");
            return;
        }
        ModalService.ShowInfo("Join code created", "The invite join code has been created successfully");
        NavigationManager.NavigateTo($"/contest/{ContestId}/manage/invites");
    }

    static string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[Random.Shared.Next(s.Length)]).ToArray());
    }

    class JoinCodeModel
    {
        [Required]
        [MinLength(6)]
        public string Code { get; set; } = RandomString(6);
        public string Name { get; set; } = "Unnamed Join Code";
        [Range(1, 365)]
        public int DaysToExpire { get; set; } = 7;
        public bool CloseAfterUse { get; set; }
    }
}




