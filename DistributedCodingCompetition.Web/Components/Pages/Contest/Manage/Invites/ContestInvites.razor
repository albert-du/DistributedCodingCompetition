@*
    Invites for a contest
*@

@page "/contest/{id:guid}/manage/invites"
@inject NavigationManager NavigationManager
@inject IClipboardService ClipboardService
@inject IApiService ApiService
@inject IModalService ModalService

<AuthCheck Contest=Id Admin />

<PageTitle>Contest Invites</PageTitle>

<h1 class="text-3xl">Invite to @contestName</h1>

<div class="flex flex-col gap-y-2">
    @if (joinCodes.Count == 0)
    {
        <div>No invites</div>
    }
    <div>click to copy</div>
    @foreach (var cod in joinCodes)
    {
        <button @onclick="() => CopyAsync(cod)" class="flex bg-gray-100">
            <div class="flex-1">@cod.Name</div>
            <div class="flex-1">Code: @cod.Code</div>
            <div class="flex-1">@cod.Uses Uses</div>
            <div class="flex-1">Expires @cod.Expiration</div>
            <button class="w-16 p-1 font-bold text-center transition-colors duration-100 bg-white border-2 rounded-lg text-rose-500 border-rose-500 hover:bg-rose-500 hover:text-white" @onclick="() => DeleteAsync(cod.Id)">Delete</button>
        </button>
    }
</div>

<a href="contest/@Id/manage/invites/new" class="italic hover:underline">New Invite</a>

<h1 class="text-2xl">Invite to administer</h1>

<div class="flex flex-col gap-y-2">
    @if (adminJoinCodes.Count == 0)
    {
        <div>No admin invites</div>
    }
    @foreach (var cod in adminJoinCodes)
    {
        <a href="contest/@Id/invites/@cod.Id" class="flex bg-gray-100">
            <div class="flex-1">@cod.Name</div>
            <div class="flex-1">Code: @cod.Code</div>
            <div class="flex-1">@cod.Uses Uses</div>
            <div class="flex-1">Expires @cod.Expiration</div>
            <div class="flex-1">@(cod.Active ? "Active" : "Inactive")</div>
        </a>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    IReadOnlyList<JoinCode> joinCodes = [];
    IReadOnlyList<JoinCode> adminJoinCodes = [];
    string contestName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var (success, codes) = await ApiService.TryReadContestJoinCodesAsync(Id);
        if (!success || codes is null)
        {
            ModalService.ShowError("Failed to load join codes", "Internal error");
            return;
        }

        joinCodes = codes.Where(x => !x.Admin).ToArray();
        adminJoinCodes = codes.Where(x => x.Admin).ToArray();

        (success, var contest) = await ApiService.TryReadContestAsync(Id);
        if (!success || contest is null)
            ModalService.ShowError("Failed to load contest", "Internal error");
        else
            contestName = contest.Name;
    }

    async Task DeleteAsync(Guid id)
    {
        if (!await ApiService.TryDeleteJoinCodeAsync(id))
            ModalService.ShowError("Failed to delete join code", "Internal error");
        else
            joinCodes = joinCodes.Where(x => x.Id != id).ToArray();
    }

    Task CopyAsync(JoinCode code) =>
         ClipboardService.SetClipboardAsync($"{NavigationManager.BaseUri}join/{code.Code}");
}