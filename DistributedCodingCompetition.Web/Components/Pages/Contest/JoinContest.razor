@*
    Join contest page.
*@
@page "/join/{code}"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject IUserStateService UserStateService
@inject IModalService ModalService
@rendermode InteractiveServer

<h1 class="text-2xl">Join Contest</h1>

@if (contest is null)
{
    <p>Couldn't find contest.</p>
}
else if (joinCode is null)
{
    <p>Invalid invitation.</p>
}
else if (!joinCode.Active)
{
    <p>Invitation is inactive.</p>
}
else if (DateTime.UtcNow > joinCode.Expiration)
{
    <p>Invitation has expired.</p>
}
else if (alreadyAdmin)
{
    <p>You are already an admin of this contest.</p>
}
else if (alreadyJoined)
{
    <p>You have already joined this contest.</p>
}
else if (contest.MinimumAge > age)
{
    <p>You do not meet the minimum age requirement for this contest.</p>
}
else
{
    <h2 class="text-3xl font-semibold text-center">@contest.Name</h2>
    @if (joinCode.Admin)
    {
        <p class="text-lg font-semibold text-center">You have been invited to administer this contest</p>
    }
    else
    {
        <p class="text-lg text-center">You have been invited to participate in this contest</p>
    }

    <p class="py-5 text-center">
        Invitation expires in @(Math.Round((joinCode.Expiration - DateTime.UtcNow).TotalDays)) Days
    </p>
    @if (joinCode.CloseAfterUse)
    {
        <p>This code will expire after use</p>
    }
    <AuthorizeView>
        <Authorized>
            <p class="text-center">
                By joining, the contest organizers will receive your full name and username and they may
                be displayed on leaderboards.
            </p>
            <div class="flex justify-center py-5">
                <button @onclick=JoinAsync
                        class="px-3 py-1 text-center transition-colors duration-100 border-2 group text-semibold active:bg-500 hover:bg-violet-400 hover:border-violet-400 hover:text-slate-100 rounded-2xl w-fit border-violet-800">
                    Join
                    as <span class="font-semibold group-hover:text-white text-violet-800">@username</span>
                </button>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="flex flex-col items-center gap-y-1">
                <div class="italic font-semibold">To join</div>
                <a class="px-2 font-semibold text-center align-middle border-2 w-fit active:bg-violet-300 text-md rounded-xl text-violet-500 hover:bg-violet-200 border-violet-500" href="auth/login?returnUrl=join/@Code">Login</a>
                <div class="italic font-semibold">or</div>
                <a class="px-2 font-semibold text-center text-white align-middle border-2 w-fit active:bg-violet-600 hover:text-violet-200 text-md rounded-xl bg-violet-500 border-violet-500" href="auth/register?returnUrl=join/@Code">Register</a>
            </div>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string Code { get; set; } = string.Empty;

    Contest? contest;
    JoinCode? joinCode;

    string username = "";
    int age = int.MaxValue;

    bool alreadyJoined;
    bool alreadyAdmin;

    protected override async Task OnParametersSetAsync()
    {
        var (success, contest) = await ApiService.TryReadContestByJoinCodeAsync(Code);
        if (!success || contest is null)
            return;

        (success, joinCode) = await ApiService.TryReadJoinCodeAsync(Code);
        if (!success || joinCode is null)
            return;

        var user = await UserStateService.UserAsync();
        if (user is null)
            return;

        username = user.Username;
        age = Age(user.Birthday);

        (success, var role) = await ApiService.TryReadUserContestRoleAsync(contest.Id, user.Id);
        if (!success || role is null)
            return;

        alreadyJoined = role == ContestRole.Participant;
        alreadyAdmin = role == ContestRole.Admin;
    }

    async Task JoinAsync()
    {
        if (await UserStateService.UserAsync() is not User user)
        {
            ModalService.ShowError("You are not logged in", "Please log in to join the contest");
            return;
        }

        if (joinCode is null)
        {
            ModalService.ShowError("Invalid invitation", "The invitation is invalid");
            return;
        }

        if (!await ApiService.TryJoinContestAsync(joinCode.Id, user.Id))
        {
            ModalService.ShowError("Failed to join contest", "Internal error");
            return;
        }

        if (joinCode.Admin)
        {
            NavigationManager.NavigateTo($"/contest/{contest!.Id}/manage");
            return;
        }

        NavigationManager.NavigateTo($"/contest/{contest!.Id}");
    }

    static int Age(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        if (birthDate.Date > today.AddYears(-age))
            age--;
        return age;
    }
}