@page "/contest/{contestId:guid}/solve/{problemId:guid}"
@inject IApiService ApiService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject CodeExecutionClient CodeExecutionClient
@inject ICurrentSavedCodeProvider CurrentSavedCodeProvider
@inject IJudgeService JudgeService
@inject IUserStateService UserStateService
@rendermode InteractiveServer
<AuthCheck Contest=ContestId />

@if (problem is null)
{
    <div>loading</div>
}
else
{
    <h1 class="text-3xl">@problem.Name</h1>
    <div class="text-xl">@contestName</div>

    <div class="px-5">
        @((MarkupString)problem.RenderedDescription)
    </div>
    <div>
        <select @bind="language">
            <option value="" disabled selected>Select language</option>
            @foreach (var lang in languages)
            {
                <option value="@lang">@lang.Replace('=', '-')</option>
            }
        </select>
    </div>

    <div class="border p-2 border-slate-500 h-[75vh]">
        <CodeEditor Code=@source Language="@Lang" @key=@Lang CodeChanged="OnCodeChanged" />
    </div>
    <div>
        <button @onclick=JudgeAsync>Submit</button>
    </div>
}

@code {
    [Parameter]
    public Guid ContestId { get; set; }

    [Parameter]
    public Guid ProblemId { get; set; }

    string contestName = "";

    Problem? problem;

    IReadOnlyList<string> languages = [];

    string language = "";
    string Lang => language.Split('=').FirstOrDefault() ?? string.Empty;
    string source = "";

    void OnCodeChanged(string newCode)
    {
        source = newCode;
        _ = TriggerSave();
    }

    bool queued;
    bool loading;
    async Task TriggerSave()
    {
        if (loading)
        {
            queued = true;
            return;
        }

        do
        {
            loading = true;
            queued = false;
            if (!await CurrentSavedCodeProvider.TrySaveCurrentCodeAsync(new()
                {
                    Code = source,
                    Language = language,
                    SubmissionTime = DateTime.UtcNow,
                }))
            {
                ModalService.ShowError("Failed to save code", "Internal error");
            }

            loading = false;
        }
        while (queued);
    }

    protected override async Task OnInitializedAsync()
    {
        (var success, var contest) = await ApiService.TryReadContestAsync(ContestId);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }
        contestName = contest.Name;

        (success, problem) = await ApiService.TryReadProblemAsync(ProblemId);
        if (!success || problem is null)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            NavigationManager.NavigateTo($"/contest/{ContestId}/solve");
            return;
        }
        languages = await CodeExecutionClient.AvailableLanguagesAsync();
        var result = await CurrentSavedCodeProvider.GetCurrentSavedCodeAsync();
        if (result is not null)
        {
            source = result.Code;
            language = result.Language;
        }
    }
    bool judgingInProgress;
    async Task JudgeAsync()
    {
        if (judgingInProgress)
            return;
        judgingInProgress = true;
        try
        {
            if ((await UserStateService.UserAsync())?.Id is not Guid userId)
            {
                ModalService.ShowError("Failed to load user", "Internal error");
                return;
            };

            // Save the submission through the api service.
            Submission submission = new()
                {
                    SubmitterId = userId,
                    ProblemId = ProblemId,
                    ContestId = ContestId,
                    Language = Lang,
                    Code = source,
                    SubmissionTime = DateTime.UtcNow,
                };
            if (!await ApiService.TryCreateSubmissionAsync(submission))
            {
                ModalService.ShowError("Failed to save submission", "Internal error");
                return;
            }
            if (await JudgeService.JudgeAsync(submission.Id) is string error)
            {
                ModalService.ShowError("Failed to judge submission", error);
            }
            NavigationManager.NavigateTo($"/contest/{ContestId}/solve/{ProblemId}/submissions");
        }
        finally
        {
            judgingInProgress = false;
        }
    }
}
