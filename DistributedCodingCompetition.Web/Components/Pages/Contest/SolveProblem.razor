@page "/contest/{contestId:guid}/solve/{problemId:guid}"
@inject IApiService ApiService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject CodeExecutionClient CodeExecutionClient
@rendermode InteractiveServer

@if (problem is null)
{
    <div>loading</div>
}
else
{
    <h1 class="text-3xl">@problem.Name</h1>
    <div class="text-xl">@contestName</div>

    <div class="px-5">
        @((MarkupString)problem.RenderedDescription)
    </div>

    <select @bind="language" @bind:after="LanguageChanged">
        @foreach (var lang in languages)
        {
            <option>@lang.Replace('=', '-')</option>
        }
    </select>

    <div class="border p-2 border-slate-500 h-[75vh]">
        <CodeEditor Code=@source Language="python" CodeChanged="OnCodeChanged" />
    </div>
}

@code {
    [Parameter]
    public Guid ContestId { get; set; }

    [Parameter]
    public Guid ProblemId { get; set; }

    string contestName = ""; 

    Problem? problem;

    IReadOnlyList<string> languages = [];

    string language = "";
    string Lang => language.Split('-').FirstOrDefault() ?? string.Empty;
    string source = "";

    void OnCodeChanged(string newCode)
    {
        source = newCode;
    }

    void LanguageChanged()
    {
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        (var success, var contest) = await ApiService.TryReadContestAsync(ContestId);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }
        contestName = contest.Name;

        (success, problem) = await ApiService.TryReadProblemAsync(ProblemId);
        if (!success || problem is null)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            NavigationManager.NavigateTo($"/contest/{ContestId}/solve");
            return;
        }
        languages = await CodeExecutionClient.AvailableLanguagesAsync();
    }
}
