@*
    User dashboard
*@
@page "/dashboard"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserStateService UserStateService
@inject IUsersService UsersService
@inject IModalService ModalService
@inject IOptions<ContestOptions> ContestOptions

<AuthCheck />

<PageTitle>Dashboard</PageTitle>

<h1 class="text-3xl">Dashboard</h1>

@if (user is null || enteredContests is null || administered is null)
{
    <LoadingSpinner />
}
else
{
    <p class="italic">Welcome, @user.Username</p>

    <div class="mb-4">
        <h2 class="text-xl">Entered Contests</h2>
        @if (enteredContests.TotalPages == 0)
        {
            <p>You are not in any contests.</p>
        }
        else
        {
            <ul class="flex flex-col gap-y-3">
                @foreach (var contest in enteredContests.Items)
                {
                    <li class="flex p-2 border rounded-md border-violet-300 gap-x-3">
                        <a class="text-xl hover:underline text-slate-700" href="contest/@contest.Id">@contest.Name</a>
                        <div>Starts @contest.StartTime UTC</div>
                        <div>Ends @contest.EndTime UTC</div>
                    </li>
                }
            </ul>
        }
    </div>

    @if (ContestOptions.Value.OpenCreation)
    {
        <a class="text-lg font-semibold hover:underline text-violet-600" href="contest/new">Start Contest</a>
    }
    else
    {
        <AuthorizeView Roles="Admin">
            <a class="text-lg font-semibold hover:underline text-violet-600" href="contest/new">Start Contest</a>
        </AuthorizeView>
    }

    @if (administered.TotalCount > 0)
    {
        <div>
            <h2 class="text-xl">Administered Contests</h2>
            <ul class="flex flex-col gap-y-2">
                @foreach (var contest in administered.Items)
                {
                    <li class="flex p-2 border rounded-md border-violet-300 gap-x-3">
                        <a class="text-xl hover:underline text-slate-700" href="contest/@contest.Id/manage">@contest.Name</a>
                        <div>Starts @contest.StartTime UTC</div>
                        <div>Ends @contest.EndTime UTC</div>
                    </li>
                }
            </ul>
        </div>
    }
}

@code {
    // current user
    UserResponseDTO? user;

    PaginateResult<ContestResponseDTO>? administered;

    PaginateResult<ContestResponseDTO>? enteredContests;

    // pagination
    int administeredPage = 1;
    int enteredContestsPage = 1;

    protected override async Task OnInitializedAsync()
    {
        // Get current user.
        user = await UserStateService.UserAsync();
        if (user is null)
        {
            // should not happen thanks to state service and auth check
            ModalService.ShowError("User not found", "User not found, please log in again.");
            return;
        }

        // Get user's administered and entered contests.
        if (await UsersService.TryReadAdministeredContestsAsync(user.Id, administeredPage, 10) is not (true, var a) || a is null)
        {
            ModalService.ShowError("Failed to load contests", "Internal error");
            return;
        }
        administered = a;

        if (await UsersService.TryReadEnteredContestsAsync(user.Id, administeredPage, 10) is not (true, var e) || e is null)
        {
            ModalService.ShowError("Failed to load contests", "Internal error");
            return;
        }
        enteredContests = e;
    }
}
