@page "/problem/{id:guid}/testcase/new"
@inject IModalService ModalService
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject IUserStateService UserStateService
@inject IMarkdownRenderService MarkdownRenderService
@rendermode InteractiveServer

<AuthCheck />
<PageTitle>New Test Case</PageTitle>

<h1 class="mb-2 text-2xl">New Test Case</h1>

<EditForm Model=model OnValidSubmit="SubmitAsync" class="flex flex-col gap-y-1">
    <label class="flex flex-col">
        <div class="pl-2">
            Input
        </div>
        <InputTextArea id="Input" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg min-h-96 text-slate-800" @bind-Value="model.Input" />
    </label>
    
    <label class="flex flex-col">
        <div class="pl-2">
            Output
        </div>
        <InputTextArea id="Output" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg min-h-96 text-slate-800" @bind-Value="model.Output" />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Description
        </div>
        <InputTextArea id="Description" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value="model.Description" />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Sample
        </div>
        <InputCheckbox id="Sample" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value="model.Sample" />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Active
        </div>
        <InputCheckbox id="Active" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value="model.Active" />

    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Weight
        </div>
        <InputNumber id="Weight" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value="model.Weight" />

    </label>

    <button type="submit" class="px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700">Create</button>

    <DataAnnotationsValidator />
    <div class="text-rose-500">
        <ValidationSummary />
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    ProblemTestCaseModel model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var (success, problem) = await ApiService.TryReadProblemAsync(Id);
        if (problem is null || !success)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }

        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            ModalService.ShowError("Failed to load user", "Internal error");
            return;
        }
        if (user.Id != problem.OwnerId)
        {
            ModalService.ShowError("You are not the owner of this problem", "Unauthorized");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }
    }

    async Task SubmitAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            return;
        }
        TestCase testCase = new()
            {
                Input = model.Input,
                Output = model.Output,
                Description = model.Description,
                Sample = model.Sample,
                Active = model.Active,
                Weight = model.Weight,
                ProblemId = Id
            };

        (var success, var testCaseId) = await ApiService.TryCreateProblemTestCaseAsync(testCase);
        if (!success || !testCaseId.HasValue)
        {
            ModalService.ShowError("Failed to create test case", "Internal error");
            return;
        }

        // add to prob
        // if(!await ApiService.TryAddTestCaseToProblemAsync(Id, testCase))
        // {
        //     ModalService.ShowError("Failed to add test case to problem", "Internal error");
        //     return;
        // }


        NavigationManager.NavigateTo($"/problem/{Id}/edit");
    }

    class ProblemTestCaseModel
    {
        public string Input { get; set; } = "";
        public string Output { get; set; } = "";
        public string Description { get; set; } = "";
        public bool Sample { get; set; }
        public bool Active { get; set; } = true;
        public int Weight { get; set; } = 100;
    }
}

