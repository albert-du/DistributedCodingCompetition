@*
    Create a new problem
*@
@page "/problem/new"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject IMarkdownRenderService MarkdownRenderService
@inject IUserStateService UserStateService
@inject IModalService ModalService
@inject IMarkdownRenderService MarkdownRenderService

<PageTitle>New Problem</PageTitle>

<h1 class="text-3xl">New Problem</h1>
<p class="text-sm">@contestName</p>
<div class="text-sm text-gray-500">Create a new problem</div>
@if (ContestId.HasValue)
{
    <AuthCheck Contest="ContestId" Admin />
}
else
{
    <AuthCheck />
}

<EditForm Model="model" OnValidSubmit=SubmitAsync class="flex flex-col gap-y-1">
    <label class="flex flex-col">
        <div class="pl-2">
            Name
        </div>
        <InputText id="Name" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" placeholder="required" @bind-Value=model.Name />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Tag Line
        </div>
        <InputText id="TagLine" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" placeholder="required" @bind-Value=model.TagLine />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Description
        </div>
        <InputTextArea id="Description" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg min-h-96 text-slate-800" @bind-Value=model.Description />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Difficulty
        </div>
        <InputText id="Difficulty" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" @bind-Value=model.Difficulty placeholder="Medium" />
    </label>
    <div>You will create test cases on the next step.</div>
    <button type="submit" class="px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700">Create</button>
    <DataAnnotationsValidator />
    <div class="text-rose-500">
        <ValidationSummary />
    </div>
</EditForm>

@code {
    // contest id if this problem is created in a contest
    [SupplyParameterFromQuery]
    public Guid? ContestId { get; set; }

    string contestName = string.Empty;
    ProblemModel model = new();

    async Task SubmitAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            return;
        }
        Problem problem = new()
            {
                Name = model.Name,
                Description = model.Description,
                RenderedDescription = MarkdownRenderService.Render(model.Description),
                Difficulty = string.IsNullOrWhiteSpace(model.Difficulty) ? null : model.Difficulty,
                OwnerId = user.Id
            };
        (var success, _) = await ApiService.TryCreateProblemAsync(problem);
        if (!success)
        {
            ModalService.ShowError("Failed to create problem", "Internal error");
            return;
        }
        if (ContestId.HasValue)
        {
            if (!await ApiService.TryAddProblemToContestAsync(ContestId.Value, problem))
            {
                ModalService.ShowError("Failed to create and add problem to contest", "Internal error");
            }
        }
        NavigationManager.NavigateTo($"problem/{problem.Id}/edit");
    }


    class ProblemModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = "# Title\n## Description\n## Input\n## Output\n## Explanation\n## Constraints";
        public string Difficulty { get; set; } = string.Empty;
        public string TagLine { get; set; } = string.Empty;
    }
}