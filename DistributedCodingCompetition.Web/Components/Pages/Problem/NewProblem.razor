@page "/problem/new"
@inject IApiService ApiService
@inject IMarkdownRenderService MarkdownRenderService
@inject IUserStateService UserStateService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject IMarkdownRenderService MarkdownRenderService
@rendermode InteractiveServer

@if (ContestId.HasValue)
{
    <AuthCheck Contest="ContestId" Admin />
}
else
{
    <AuthCheck />
}

<EditForm Model="model" OnValidSubmit="SubmitAsync">

    <div class="form-group">
        <label for="Name">Name</label>
        <InputText id="Name" class="form-control" @bind-Value="model.Name" />
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <InputText id="Description" class="form-control" @bind-Value="model.Description" />
    </div>

    <div class="form-group">
        <label for="Difficulty">Difficulty</label>
        <InputText id="Difficulty" class="form-control" @bind-Value="model.Difficulty" />
    </div>
    <div>You will create test cases on the next step.</div>
    <button type="submit" class="btn btn-primary">Create</button>
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>

@code {
    [SupplyParameterFromQuery]
    public Guid? ContestId { get; set; }

    async Task SubmitAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            return;
        }
        Problem problem = new()
            {
                Name = model.Name,
                Description = model.Description,
                RenderedDescription = MarkdownRenderService.Render(model.Description),
                Difficulty = string.IsNullOrWhiteSpace(model.Difficulty) ? null : model.Difficulty,
                OwnerId = user.Id
            };
        (var success, _) = await ApiService.TryCreateProblemAsync(problem);
        if (!success)
        {
            ModalService.ShowError("Failed to create problem", "Internal error");
            return;
        }
        if (ContestId.HasValue)
        {
            if (!await ApiService.TryAddProblemToContestAsync(ContestId.Value, problem))
            {
                ModalService.ShowError("Failed to create and add problem to contest", "Internal error");
            }
        }
        NavigationManager.NavigateTo($"problem/{problem.Id}/edit");
    }

    ProblemModel model = new();

    class ProblemModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = "# Title\n## Description\n## Input\n## Output\n## Explanation\n## Constraints";
        public string Difficulty { get; set; } = string.Empty;
    }
}