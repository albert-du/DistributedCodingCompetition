@*
    This component is used to edit a test case for a problem.
    It is used to edit the input, output, description, sample, active, and weight of a test case.
    The user can edit the test case and save the changes.
    The user can also navigate back to the problem page.
*@
@page "/problem/{problemId:guid}/testcase/{testCaseId:guid}/edit"
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IApiService ApiService
@inject IUserStateService UserStateService
@inject IMarkdownRenderService MarkdownRenderService
@inject IJudgeService JudgeService

<AuthCheck Id=userId />

<PageTitle>Edit Test Case</PageTitle>

<h1 class="mb-2 text-2xl">Edit Test Case</h1>

<EditForm Model=model OnValidSubmit=SubmitAsync class="flex flex-col gap-y-1">
    <label class="flex flex-col">
        <div class="pl-2">
            Input
        </div>
        <InputTextArea id="Input" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg min-h-96 text-slate-800"
                       @bind-Value=model.Input />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Output
        </div>
        <InputTextArea id="Output" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg min-h-96 text-slate-800"
                       @bind-Value=model.Output />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Description
        </div>
        <InputTextArea id="Description" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800"
                       @bind-Value=model.Description />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Sample
        </div>
        <InputCheckbox id="Sample" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800"
                       @bind-Value=model.Sample />
    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Active
        </div>
        <InputCheckbox id="Active" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800"
                       @bind-Value=model.Active />

    </label>

    <label class="flex flex-col">
        <div class="pl-2">
            Weight
        </div>
        <InputNumber id="Weight" class="w-full px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800"
                     @bind-Value=model.Weight />

    </label>

    <button type="submit"
            class="px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700">
        Save
    </button>

    <DataAnnotationsValidator />
    <div class="text-rose-500">
        <ValidationSummary />
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid ProblemId { get; set; }

    [Parameter]
    public Guid TestCaseId { get; set; }

    ProblemTestCaseModel model { get; set; } = new();
    TestCase? testCase;
    Guid userId;
    bool submitting;

    async Task SubmitAsync()
    {
        if (submitting)
            return;

        try
        {
            var user = await UserStateService.UserAsync();
            if (user is null || testCase is null)
                return;

            // Load the test case
            testCase.Input = model.Input;
            testCase.Output = model.Output;
            testCase.Description = model.Description;
            testCase.Sample = model.Sample;
            testCase.Active = model.Active;
            testCase.Weight = model.Weight;

            if (!await ApiService.TryUpdateTestCaseAsync(testCase))
            {
                ModalService.ShowError("Failed to update test case", "Internal error");
                return;
            }

            await JudgeService.RejudgeProblemAsync(ProblemId);


            NavigationManager.NavigateTo($"/problem/{ProblemId}/edit");
        }
        finally
        {
            submitting = false;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var (success, problem) = await ApiService.TryReadProblemAsync(ProblemId);
        if (problem is null || !success)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }

        if (await UserStateService.UserAsync() is not User user)
        {
            ModalService.ShowError("Failed to load user", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }

        userId = user.Id;

        (success, testCase) = await ApiService.TryReadTestCaseAsync(TestCaseId);
        if (!success || testCase is null)
        {
            ModalService.ShowError("Failed to load test cases", "Internal error");
            return;
        }

        // Load the test case
        model.Input = testCase.Input;
        model.Output = testCase.Output;
        model.Description = testCase.Description;
        model.Sample = testCase.Sample;
        model.Active = testCase.Active;
        model.Weight = testCase.Weight;
    }

    class ProblemTestCaseModel
    {
        public string Input { get; set; } = string.Empty;
        public string Output { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public bool Sample { get; set; }
        public bool Active { get; set; } = true;
        public int Weight { get; set; } = 100;
    }
}
