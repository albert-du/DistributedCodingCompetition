@*
    This component listens for modal messages and displays them in a modal dialog.
*@
@inject IModalService ModalService
@implements IDisposable

@if (modalMessage is not null)
{
    <div class="z-50 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
        <div class="p-4 bg-white rounded-md">
            <h3 class="text-lg font-semibold">@modalMessage.Title</h3>
            <p>@modalMessage.Message</p>
            <InputNumber @bind-Value="value" />
            <div class="flex">
                <button class="rounded-lg px-2 py-1 bg-violet-400" @onclick="Enter">Submit</button>
                <button class="rounded-lg px-2 py-1 bg-slate-400" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
}

@code {
    IModalService.IntegerModalMessage? modalMessage;

    int value;

    void Enter()
    {
        if (value < modalMessage?.Min || value > modalMessage?.Max)
        {
            ModalService.ShowError("Invalid value", "Value out of range");
            return;
        }

        modalMessage?.OnResult(value);
        modalMessage = null;
    }

    void Close()
    {
        modalMessage?.OnResult(null);
        modalMessage = null;
    }

    async void OnShow(IModalService.IntegerModalMessage message)
    {
        value = message.Min;
        modalMessage = message;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose() =>
        ModalService.OnShowInteger -= OnShow;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            ModalService.OnShowInteger += OnShow;
    }
}
