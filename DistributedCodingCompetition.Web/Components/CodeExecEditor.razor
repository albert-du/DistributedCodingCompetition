@inject IJSRuntime JSRuntime
@inject CodeExecutionClient CodeExecutionClient
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
<div class="flex">
    <button @onclick=RunAsync class="px-4 py-2 text-white bg-blue-500 rounded-md">Run</button>
    <p>Press the Run button to execute the code</p>
</div>

<select @onchange=SelectedCarsChanged>
    @foreach (var lang in languages)
    {
        <option>@lang</option>
    }
</select>
<div class="border border-gray-100 h-96">
    <StandaloneCodeEditor CssClass="h-full" Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" />

</div>

<div>
    @if (executing)
    {
        <div>Executing</div>   
    }
    else
    {
        <pre>@result</pre>
    }
</div>

@code {
    IReadOnlyList<string> languages = Array.Empty<string>();
    string? selectedLanguage;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "javascript",
                Value = "function xyz() {\n" +
                                        "   console.log(\"Hello world!\");\n" +
                                        "}",
            };
    }

    bool executing;
    string? result;
    private async Task RunAsync()
    {
        if (selectedLanguage is null)
            return;
        if (executing)
            return;

        executing = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            var models = await BlazorMonaco.Editor.Global.GetModels(JSRuntime);
            var model = models.FirstOrDefault();
            if (model is null)
                return;

            var lines = await model.GetLinesContent();
            var code = string.Join('\n', lines);
            var res = await CodeExecutionClient.ExecuteCodeAsync(new()
            {
                Code = code,
                Language = selectedLanguage
            });
            if (res is null)
            {
                result = "Failed";
                return;
            }
            result = res.Output;

        }
        finally
        {
            executing = false;
        }
    }

    private void SelectedCarsChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
            selectedLanguage = e.Value.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        languages = await CodeExecutionClient.AvailableLanguagesAsync();
        selectedLanguage = languages.FirstOrDefault() ;
    }
}