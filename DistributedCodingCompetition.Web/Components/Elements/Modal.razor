@*
    This component listens for modal messages and displays them in a modal dialog.
*@
@inject IModalService ModalService
@implements IDisposable
@rendermode InteractiveServer

@if (modalMessage is not null)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
        <div class="p-4 bg-white rounded-md">
            <h3 class="text-lg font-semibold">@modalMessage.Title</h3>
            <p>@modalMessage.Message</p>
            <button @onclick="Close">Close</button>
        </div>
    </div>
}

@code {
    IModalService.ModalMessage? modalMessage;

    void Close() =>
        modalMessage = null;

    async void OnShow(IModalService.ModalMessage message)
    {
        modalMessage = message;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose() =>
        ModalService.OnShow -= OnShow;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            ModalService.OnShow += OnShow;
    }
}
