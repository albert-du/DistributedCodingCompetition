@inject IJSRuntime JSRuntime
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@rendermode InteractiveServer

<StandaloneCodeEditor @ref=editor CssClass="h-full" ConstructionOptions=EditorConstructionOptions
    OnDidChangeModel=EditorModelChangedAsync />

@code {
    private StandaloneCodeEditor editor = default!;

    [Parameter]
    public EventCallback<string> CodeChanged { get; set; }

    [Parameter]
    public string Code { get; set; } = string.Empty;

    [Parameter]
    public string Language { get; set; } = "text";

    [Parameter]
    public bool ReadOnly { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                ReadOnly = ReadOnly,
                AutomaticLayout = true,
                Language = Language,
                Value = Code,
            };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (editor is not null)
        {
            await editor.
        }
    
    }

    private async Task EditorModelChangedAsync()
    {
        var model = await editor.GetModel();
        Code = string.Join('\n', await model.GetLinesContent());
        await CodeChanged.InvokeAsync(Code);
    }
}