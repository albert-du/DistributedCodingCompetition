@rendermode InteractiveServer
@page "/"
@inject IExecRunnerRepository ExecRunnerRepository
@inject NavigationManager NavigationManager
@inject IActiveRunnersService ActiveRunnersService
@inject IExecRunnerService ExecRunnerService
@using DistributedCodingCompetition.ExecutionShared

<div class="mx-12 mt-4">
    <h3 class="text-2xl">Execution Runners</h3>

    @if (runners == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <button class="px-2 my-1 bg-gray-100 rounded-lg btn btn-primary hover:bg-gray-200 " @onclick="AddRunner">Add New Runner</button>
        <table class="border border-collapse table-auto border-slate-400 sm:w-4/5">
            <thead class="border border-slate-400 ">
                <tr>
                    <th class="border border-slate-400">Name</th>
                    <th class="w-64 border border-slate-400">Endpoint</th>
                    <th class="border border-slate-400">Weight</th>
                    <th class="border border-slate-400">Enabled</th>
                    <th class="border border-slate-400">Available</th>
                    <th class="border border-slate-400">Live</th>
                    <th class="border border-slate-400">Status</th>
                    <th class="border border-slate-400">System</th>
                    <th class="border border-slate-400">Packages</th>
                    <th class="border border-slate-400">Languages</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (runner, status) in runners)
                {
                    <tr class="border border-slate-400 ">
                        <td class="border border-slate-300">@runner.Name</td>
                        <td class="border border-slate-300">@runner.Endpoint</td>
                        @if (totalWeight != 0)
                        {
                            <td class="border border-slate-300">
                                @((status?.Ready is true && runner.Enabled ? runner.Weight : 0) *
                                    100 / totalWeight) &percnt;
                            </td>
                        }
                        else
                        {
                            <td class="border border-slate-300">0%</td>
                        }
                        <td class="border border-slate-300">@runner.Enabled</td>
                        <td class="border border-slate-300">@(status?.Ready is true)</td>
                        <td class="border border-slate-300">@(status is not null)</td>
                        <td class="border border-slate-300">@status?.Message</td>
                        <td class="border border-slate-300">
                            @foreach (var line in status?.SystemInfo.Split('\n') ?? [])
                            {
                                <div>@line</div>
                            }

                        </td>
                        <td class="border border-slate-300">
                            @foreach (var p in status?.Packages.Split('\n') ?? [])
                            {
                                <div>@p</div>
                            }
                        </td>
                        <td class="border border-slate-300">
                            @foreach (var l in status?.Languages.Split('\n') ?? [])
                            {
                                <div>@l</div>
                            }
                        </td>
                        <td class="border border-slate-300">
                            <button class="p-1 mx-1 my-2 bg-gray-200 rounded-sm hover:bg-gray-300"
                                    @onclick="() => EditRunner(runner.Id)">
                                Edit
                            </button>
                            <button class="p-1 mx-1 my-2 rounded-sm bg-rose-500 hover:rose-gray-600"
                                    @onclick="() => DeleteRunnerAsync(runner.Id)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

</div>

@code {
    int totalWeight = -1;

    IReadOnlyList<(ExecRunner, RunnerStatus?)>? runners;

    void AddRunner() =>
        NavigationManager.NavigateTo("execrunner");

    void EditRunner(Guid runnerId) =>
        NavigationManager.NavigateTo($"execrunner/{runnerId}");

    async Task DeleteRunnerAsync(Guid runnerId)
    {
        await ExecRunnerRepository.DeleteExecRunnerAsync(runnerId);
        await ActiveRunnersService.IndexExecRunnersAsync();
        await RefreshRunnersAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await RefreshRunnersAsync();
    }

    async Task RefreshRunnersAsync()
    {
        runners = null;
        totalWeight = 0;
        await InvokeAsync(StateHasChanged);
        var execRunners = await ExecRunnerRepository.GetExecRunnersAsync();
        var statuses = new Task<RunnerStatus?>[execRunners.Count];
        for (int i = 0; i < execRunners.Count; i++)
            statuses[i] = ExecRunnerService.RefreshExecRunnerAsync(execRunners[i]);

        await Task.WhenAll(statuses);
        List<(ExecRunner, RunnerStatus?)> rv = new();
        for (var i = 0; i < execRunners.Count; i++)
        {
            var runner = execRunners[i];
            var status = await statuses[i];
            rv.Add((runner, status));
            if (status?.Ready is true && runner.Enabled)
                totalWeight += runner.Weight;
        }
        runners = rv;
        await InvokeAsync(StateHasChanged);
    }
}