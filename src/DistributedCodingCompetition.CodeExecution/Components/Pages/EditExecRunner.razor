@rendermode InteractiveServer
@page "/execrunner"
@page "/execrunner/{execRunnerId:guid?}"
@inject IExecRunnerRepository ExecRunnerRepository
@inject IExecRunnerService ExecRunnerService
@inject NavigationManager NavigationManager
@inject IActiveRunnersService ActiveRunnersService
@using System.Collections.Frozen
@using DistributedCodingCompetition.ExecutionShared

<div class="sm:w-1/2 mx-auto">
    <a class="hover:underline italic my-2 py-1" href="/">back</a>

    @if (ExecRunnerId.HasValue)
    {
        <h3 class="text-2xl">
            @execRunner.Name
        </h3>
    }
    else
    {
        <h3 class="text-2xl">
            New Runner
        </h3>
    }

    <EditForm Model=@execRunner class="flex flex-col gap-y-2 gap-x-3">
        <div>
            <label for="Endpoint">Endpoint</label>
            <InputText class="rounded-md px-2 py-1 bg-gray-100" id="Endpoint" placeholder="http://execrunner:2000/" @bind-Value="execRunner.Endpoint" />
        </div>
        <div>
            <label for="Key">Key</label>
            <InputText class="rounded-md px-2 py-1 bg-gray-100" id="Key" placeholder="********" @bind-Value="execRunner.Key" />
        </div>
        <div>
            <label for="Enabled">Enabled</label>
            <InputCheckbox id="Enabled" @bind-Value="execRunner.Enabled" />
        </div>
        <div>
            <label for="Weight">Weight</label>
            <InputNumber class="rounded-md px-2 py-1 bg-gray-100" id="Weight" @bind-Value="execRunner.Weight" />
        </div>

        @if (ExecRunnerId.HasValue)
        {
            <div>
                @foreach (var package in installedPackages)
                {
                    <div class="w-64 flex justify-between ">
                        <div>
                            @package
                        </div>
                        <button class="text-rose-500" @onclick="() => RemovePackage(package)">
                            Remove
                        </button>
                    </div>
                }
            </div>
            <div>
                @foreach (var package in availablePackages)
                {
                    <div class="w-64 flex justify-between ">
                        <div>
                            @package
                        </div>
                        <button class="text-emerald-500" @onclick="() => AddPackage(package)">
                            Add
                        </button>
                    </div>
                }
            </div>
        }
        <button class="bg-gray-100 hover:bg-gray-200 rounded-lg px-2 my-1" type="submit" @onclick="SaveRunnerAsync">Save</button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
</div>

@code
{
    ExecRunner execRunner = new();

    RunnerStatus? status;

    List<string> availablePackages = [];
    List<string> installedPackages = [];

    [Parameter]
    public Guid? ExecRunnerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ExecRunnerId.HasValue && await ExecRunnerRepository.ReadExecRunnerAsync(ExecRunnerId.Value) is ExecRunner runner)
        {
            execRunner = runner;
            status = await ExecRunnerService.RefreshExecRunnerAsync(execRunner);
            installedPackages = status?.Packages.Split('\n').ToList() ?? [];
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ExecRunnerId.HasValue)
        {
            var set = installedPackages.ToFrozenSet();
            availablePackages = (await ExecRunnerService.FetchAvailablePackagesAsync(execRunner)).Where(x => !set.Contains(x)).ToList();
            await InvokeAsync(StateHasChanged);
        }
    }
    bool modified = false;
    private void AddPackage(string name)
    {
        installedPackages.Add(name);
        availablePackages.Remove(name);
        modified = true;
    }

    private void RemovePackage(string name)
    {
        installedPackages.Remove(name);
        availablePackages.Add(name);
        modified = true;
    }

    private async Task SaveRunnerAsync()
    {
        if (modified)
            _ = ExecRunnerService.SetPackagesAsync(execRunner, installedPackages);

        status = await ExecRunnerService.RefreshExecRunnerAsync(execRunner);
        if (ExecRunnerId.HasValue)
            await ExecRunnerRepository.UpdateExecRunnerAsync(execRunner);
        else
            await ExecRunnerRepository.CreateExecRunnerAsync(execRunner);

        await ActiveRunnersService.IndexExecRunnersAsync();

        NavigationManager.NavigateTo("");
    }
}