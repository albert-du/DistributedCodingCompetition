@page "/auth/password/forgot"
@inject IAuthService AuthService
@inject IEmailService EmailService
@inject IUsersService UsersService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<PageTitle>Forgot Password</PageTitle>

<h2 class="text-3xl">Forgot Password</h2>

@if (loading)
{
    <LoadingSpinner />
}
else if (otc is null)
{
    <div class="py-5">
        <p>Enter your email address to receive a one-time code to reset your password.</p>
    </div>
    <input @bind=email type="email" class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" placeholder="email" />
    <button @onclick=SendOtcAsync class="px-4 py-2 mt-4 text-white bg-blue-500 rounded-lg hover:bg-blue-600 active:bg-blue-700">Send Code</button>

}
else if (!otcValid)
{
    <EditForm Enhance Model=otcModel class="flex flex-col items-center gap-y-2" FormName="change-password-1-form">
        <h3>Enter the verification code sent to your email</h3>
        <p class="italic">@email</p>
        <InputText pattern="[0-9]{6}" placeholder="000000"
                   class="w-20 px-2 py-1 my-2 ml-2 text-center bg-gray-100 rounded-lg text-slate-800"
                   @bind-Value=otcModel.OTC />
        <div class="flex justify-center py-3">
            <button class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                    type="submit" @onclick=VerifyOtcAsync>
                Submit
            </button>
        </div>
        @if (!sendLocked)
        {
            <div class="flex justify-center">
                <button class="px-2 py-1 border rounded-xl text-violet-500 border-violet-500 hover:bg-violet-200 active:bg-violet-400"
                        @onclick=SendOtcAsync>
                    Resend
                </button>
            </div>
        }
    </EditForm>
}
else if (!done)
{
    <EditForm Enhance class="flex flex-col items-center gap-y-2" Model=newPasswordModel OnValidSubmit=ChangeAsync FormName="change-password-2-form">
        <label class="flex flex-col">
            <div class="pl-2">
                Password
            </div>
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password"
                       @bind-Value=newPasswordModel.NewPassword />
            <div class="h-2 text-rose-500">
                <ValidationMessage For=@(() => newPasswordModel.NewPassword) />
            </div>
        </label>
        <label class="flex flex-col">
            <div class="pl-2">
                Confirm Password
            </div>
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password"
                       @bind-Value=newPasswordModel.ConfirmPassword />
            <div class="h-2 text-rose-500">
                <ValidationMessage For=@(() => newPasswordModel.ConfirmPassword) />
            </div>
        </label>
    </EditForm>
}
else
{
    <div>Password Changed!</div>
    @if (ReturnURL is not null)
    {
        <div>Redirecting...</div>
    }
    else
    {
        <a href="auth/login" class="text-violet-800 italic hover:underline">Login</a>
    }
}

<div class="font-semibold h-2 text-rose-500">
    @error
</div>
@code {
    [SupplyParameterFromQuery]
    public string? ReturnURL { get; set; }

    string? error;
    string? otc;
    string otcInput = string.Empty;
    string email = string.Empty;
    bool otcValid;
    bool done;
    bool loading;
    Guid? userId;

    bool sendLocked;
    async Task DelayReleaseAsync()
    {
        sendLocked = true;
        await Task.Delay(30_000);
        sendLocked = false;
    }

    async Task SendOtcAsync()
    {
        if (sendLocked)
            return;
        _ = DelayReleaseAsync();

        otc = Utils.RandomOTC();

        // check for id
        var (success, user) = await UsersService.TryReadUserByEmailAsync(email);
        if (success && user is not null)
            userId = user.Id;

        await EmailService.SendEmailAsync(email, "Password Reset", $"Your one-time code is {otc}");
    }

    async Task VerifyOtcAsync()
    {
        error = null;
        if (otc is null)
            return;

        // prevent spam
        await Task.Delay(1000);

        if (otcModel.OTC == otc)
            otcValid = true;
        else
            error = "Invalid code";

        // if there wasn't a id already extracted from email, and the email has been confirmed, the user actually needs to be registering
        NavigationManager.NavigateTo("auth/register", true);
    }

    async Task ChangeAsync()
    {
        error = null;
        loading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var delay = Task.Delay(1000);
            if (newPasswordModel.NewPassword.Length < 8)
            {
                error = "Password must be at least 8 characters";
                return;
            }

            if (newPasswordModel.NewPassword != newPasswordModel.ConfirmPassword)
            {
                error = "Passwords do not match";
                return;
            }

            if (!otcValid)
            {
                error = "Invalid code";
                return;
            }

            if (!userId.HasValue)
                return;

            if (await AuthService.TryResetPasswordAsync(userId.Value, newPasswordModel.NewPassword))
            {
                done = true;
                if (ReturnURL is not null)
                {
                    await Task.Delay(3000);
                    NavigationManager.NavigateTo(ReturnURL);
                }
            }
            else
                error = "Failed to change password";
            await delay;
        }
        finally
        {
            loading = false;
        }
    }

    protected override void OnInitialized()
    {
        otcModel ??= new();
        newPasswordModel ??= new();
    }

    [SupplyParameterFromForm]
    public OTCModel otcModel { get; set; } = null!;
    public class OTCModel
    {
        [Required]
        [Length(6, 6)]
        public string OTC { get; set; } = string.Empty;
    }

    [SupplyParameterFromForm]
    NewPasswordModel newPasswordModel { get; set; } = null!;
    public class NewPasswordModel
    {
        [Required]
        [MinLength(8)]
        public string NewPassword { get; set; } = string.Empty;

        [Required]
        [Compare(nameof(NewPassword))]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}