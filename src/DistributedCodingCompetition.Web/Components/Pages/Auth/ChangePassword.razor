@page "/auth/password/change"
@inject IUserStateService UserStateService
@inject IAuthService AuthService
<AuthCheck />

<PageTitle>Change Password</PageTitle>

<h2 class="text-3xl">Change Password</h2>

@if (done)
{
    <div>Password changed successfully</div>
    <a class="text-violet-800 italic hover:underline" href="dashboard">dashboard</a>
}
else if (loading)
{
    <LoadingSpinner />
}
else
{
    <EditForm Model=model OnValidSubmit=SubmitAsync>
        <label class="flex flex-col">
            Current Password
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password" @bind-Value=model.CurrentPassword />
            <div class="h-2 text-rose-500">
                <ValidationMessage For=@(() => model.CurrentPassword) />
            </div>
        </label>

        <label class="flex flex-col">
            <span>New Password</span>
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password" @bind-Value=model.NewPassword />
            <div class="h-2 text-rose-500">
                <ValidationMessage For=@(() => model.NewPassword) />
            </div>
        </label>

        <label class="flex flex-col">
            <span>Confirm Password</span>
            <InputText class="w-64 px-2 py-1 ml-2 bg-gray-100 rounded-lg text-slate-800" type="password" @bind-Value=model.ConfirmPassword />
            <div class="h-2 text-rose-500">
                <ValidationMessage For=@(() => model.ConfirmPassword) />
            </div>
        </label>
    </EditForm>
    <div class="text-rose-500 font-semibold">
        @failure
    </div>
}


@code {
    ChangePasswordModel model = new();
    bool loading;
    bool done;
    string? failure;

    async Task SubmitAsync()
    {
        loading = true;
        failure = null;
        await InvokeAsync(StateHasChanged);
        var delay = Task.Delay(1000);
        try
        {
            var user = await UserStateService.UserAsync();
            if (user is null)
                return;

            if (model.NewPassword != model.ConfirmPassword)
            {
                // shouldn't happen, but just in case
                failure = "Passwords do not match";
                return;
            }

            if (model.NewPassword == model.CurrentPassword)
            // new password is the same as the current password
            // don't need to actually change the password
            {
                failure = "New password is the same as the current password";
                return;
            }

            // change password
            if (await AuthService.TryChangePasswordAsync(user.Id, model.CurrentPassword, model.NewPassword))
            {
                // successful
                done = true;
            }
            else
            {
                // failed
                failure = "Failed to change password";
            }
        }
        finally
        {
            loading = false;
        }
        await delay;
    }

    class ChangePasswordModel
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "New password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}

