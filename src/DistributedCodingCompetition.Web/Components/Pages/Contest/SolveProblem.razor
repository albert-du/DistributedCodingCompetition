@page "/contest/{contestId:guid}/solve/{problemId:guid}"
@inject IContestsService ContestsService
@inject IProblemsService ProblemsService
@inject ISubmissionsService SubmissionsService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject ICodeExecutionService CodeExecutionService
@inject ICurrentSavedCodeProvider CurrentSavedCodeProvider
@inject IJudgeService JudgeService
@inject IUserStateService UserStateService
@inject ISelectedLanguageService SelectedLanguageService

<AuthCheck Contest=ContestId />

<PageTitle>Solve @problem?.Name</PageTitle>

@if (problem is null)
{
    <LoadingSpinner />
}
else
{
    <div class="flex justify-between">
        <h1 class="text-3xl">@problem.Name</h1>
        <div>Remaining: @((contestEndTimeUTC - DateTime.UtcNow).ToString(@"hh\:mm\:ss"))</div>
    </div>
    <div class="text-xl">@contestName</div>

    <div class="px-5 prose">
        @((MarkupString)problem.RenderedDescription)
    </div>
    <div class="py-1">
        <select class="px-2 py-1 my-1 rounded-md" @bind="language" @bind:after=LanguageChangedAsync>
            <option value="" disabled selected>Select language</option>
            @foreach (var lang in languages)
            {
                <option value="@lang">@lang.Replace('=', '-')</option>
            }
        </select>
    </div>

    <div class="border p-2 border-slate-500 h-[75vh]">
        <CodeEditor Code=@source Language=@Lang @key=@Lang CodeChanged=OnCodeChanged />
    </div>
    <div class="pb-24">
        @if (judgingInProgress)
        {
            <div>Submitting...</div>
            <LoadingSpinner />
        }
        else
        {
            <div class="flex justify-center py-1">
                <button class="px-2 py-1 rounded-lg bg-violet-500 text-slate-200 hover:bg-violet-600 active:bg-violet-700" @onclick=JudgeAsync>Submit</button>
            </div>
            @if (latestScore is not null)
            {
                <div class="font-bold flex flex-col gap-y-2 @(latestScore.Completed ? "text-emerald-500" : (latestScore.CasesPassed > 0) ? "text-amber-500" : "text-rose-500" )">
                    <div>Testcases: @latestScore.CasesPassed out of @latestScore.CasesTotal</div>
                    <div>Score: @latestScore.Score out of @latestScore.MaxScore</div>
                    <div>Points: @latestScore.Points</div>
                </div>
            }

            <a class="italic hover:underline text-violet-800" href="contest/@ContestId/solve/@ProblemId/submissions">View your submissions</a>
        }
    </div>
}

@code {
    [Parameter]
    public Guid ContestId { get; set; }

    [Parameter]
    public Guid ProblemId { get; set; }

    string contestName = string.Empty;
    DateTime contestEndTimeUTC;

    ProblemResponseDTO? problem;

    IReadOnlyList<string> languages = [];

    string language = string.Empty;
    string Lang => language.Split('=').FirstOrDefault() ?? string.Empty;
    string source = string.Empty;

    void OnCodeChanged(string newCode)
    {
        if (source == newCode)
            return;

        source = newCode;

        _ = TriggerSave();
    }

    ProblemUserSolveStatus? latestScore;

    bool queued;
    bool loading;
    async Task TriggerSave()
    {
        if (loading)
        {
            queued = true;
            return;
        }

        do
        {
            loading = true;
            queued = false;
            await Task.Delay(1000);
            if (!await CurrentSavedCodeProvider.TrySaveCurrentCodeAsync(new()
                {
                    Code = source,
                    Language = language,
                    SubmissionTime = DateTime.UtcNow,
                }))
                ModalService.ShowError("Failed to save code", "Internal error");

            loading = false;
        }
        while (queued);
    }

    protected override async Task OnInitializedAsync()
    {
        (var success, var contest) = await ContestsService.TryReadContestAsync(ContestId);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }
        contestName = contest.Name;
        contestEndTimeUTC = contest.EndTime;
        (success, problem) = await ProblemsService.TryReadProblemAsync(ProblemId);
        if (!success || problem is null)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            NavigationManager.NavigateTo($"/contest/{ContestId}/solve");
            return;
        }
        languages = await CodeExecutionService.AvailableLanguagesAsync();
        var result = await CurrentSavedCodeProvider.GetCurrentSavedCodeAsync();

        if (result is not null)
        {
            source = result.Code;
            language = result.Language;
        }

        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            ModalService.ShowError("Failed to load user", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }

        (success, latestScore) = await ContestsService.TryReadContestProblemUserSolveStatusAsync(contestId: ContestId, problemId: ProblemId, userId: user.Id);
        if (!success)
        {
            ModalService.ShowError("Failed to load user solve status", "Internal error");
            NavigationManager.NavigateTo("/dashboard");
            return;
        }
    }
    bool judgingInProgress;
    async Task JudgeAsync()
    {
        if (judgingInProgress)
            return;
        judgingInProgress = true;
        try
        {
            var delay = Task.Delay(2000);
            if ((await UserStateService.UserAsync())?.Id is not Guid userId)
            {
                ModalService.ShowError("Failed to load user", "Internal error");
                return;
            };

            // Save the submission through the api service.
            SubmissionRequestDTO request = new()
                {
                    UserId = userId,
                    ProblemId = ProblemId,
                    ContestId = ContestId,
                    Language = language.Replace('-', '='),
                    Code = source,
                };
            if (await SubmissionsService.TryCreateSubmissionAsync(request) is not (true, SubmissionResponseDTO))
            {
                ModalService.ShowError("Failed to save submission", "Internal error");
                return;
            }
            if (await JudgeService.JudgeAsync(request.Id) is string error)
            {
                ModalService.ShowError("Failed to judge submission", error);
                return;
            }
            var (success, sub) = await SubmissionsService.TryReadSubmissionAsync(request.Id);
            if (!success || sub is null)
            {
                ModalService.ShowError("Failed to load latest", "Internal error");
                return;
            }
            await delay;
            latestScore = new(sub.ProblemId, sub.Points, sub.Score, sub.MaxPossibleScore, sub.TestCasesPassed, sub.TestCasesTotal);
        }
        finally
        {
            judgingInProgress = false;
        }
    }

    Task LanguageChangedAsync()
    {
        _ = TriggerSave();
        return SelectedLanguageService.ReportLanguageSwitch(language);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            if (string.IsNullOrEmpty(language))
            {
                language = await SelectedLanguageService.GetSelectedLanguage() ?? string.Empty;
                await InvokeAsync(StateHasChanged);
            }

            using PeriodicTimer periodicTimer = new(TimeSpan.FromMilliseconds(500));
            while (await periodicTimer.WaitForNextTickAsync())
                await InvokeAsync(StateHasChanged);
        }
    }
}
