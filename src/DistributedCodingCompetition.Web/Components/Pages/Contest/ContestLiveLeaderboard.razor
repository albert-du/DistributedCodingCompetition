@page "/contest/{id:guid}/leaderboard/live"
@inject NavigationManager NavigationManager
@inject IContestsService ContestsService
@inject IModalService ModalService
@inject ILeaderboardService LeaderboardService
@rendermode InteractiveAuto

<AuthCheck Contest=Id />

<PageTitle>Live Leaderboard</PageTitle>

<h1 class="text-3xl">@contest?.Name LIVE Leaderboard</h1>
<a class="text-violet-500 italic hover:underline" href="contest/@Id">back</a>

<div>this leaderboard updates live up to the first 100 places</div>
<a class="text-violet-500 italic hover:underline" href="contest/@Id/leaderboard">back to certified (not live) leaderboard</a>

@if (contest is null || leaderboard is null)
{
    <LoadingSpinner />
}
else
{
    <div class="flex flex-col gap-y-1">
        <div>This leaderboard was generated @leaderboard.Creation</div>
        <div>Displaying @leaderboard.Entries.Count contestents out of @leaderboard.Count</div>
        <div class="flex flex-col gap-y-1 min-h-[75vh]">
            <div class="flex w-full font-bold text-lg border-b border-slate-500">
                <div class="w-1/5">Rank</div>
                <div class="w-3/5">Username</div>
                <div class="w-1/5">Points</div>
            </div>

            @foreach (var entry in leaderboard.Entries)
            {
                <div class="flex w-full">
                    <div class="w-1/5">@entry.Rank</div>
                    <div class="w-3/5">@entry.Username</div>
                    <div class="w-1/5">@entry.Points</div>
                </div>
            }
        </div>


    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    ContestResponseDTO? contest;

    Leaderboard? leaderboard;

    protected override async Task OnParametersSetAsync()
    {
        (var success, contest) = await ContestsService.TryReadContestAsync(Id);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        leaderboard = await LeaderboardService.TryGetLiveLeaderboardAsync(Id);
        if (leaderboard is null)
        {
            ModalService.ShowError("Failed to load leaderboard", "Internal error");
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(5));
            while (await periodicTimer.WaitForNextTickAsync())
            {
                leaderboard = await LeaderboardService.TryGetLiveLeaderboardAsync(Id);
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
