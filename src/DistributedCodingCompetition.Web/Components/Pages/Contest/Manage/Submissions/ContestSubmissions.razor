@*
    View all the submissions for a contest. This page is only accessible to contest admins.
*@
@page "/contest/{id:guid}/manage/submissions"
@inject ISubmissionsService SubmissionsService
@inject IContestsService ContestsService
@inject ISubmissionsService SubmissionsService
@inject IModalService ModalService
@inject IUserStateService UserStateService
@inject IJudgeService JudgeService
@inject NavigationManager NavigationManager

<AuthCheck Contest=Id Admin />

<PageTitle>@contest?.Name Submissions</PageTitle>

<h1 class="text-3xl">@contest?.Name Submissions</h1>

@if (submissions is null)
{
    <LoadingSpinner />
}
else
{
    <table class="table-auto">
        <thead>
            <tr>
                <th>Problem</th>
                <th>Time (UTC)</th>
                <th>Judged (UTC)</th>
                <th>Language</th>
                <th>
                    <div>
                        Score
                    </div>
                    <div>
                        @("Cases|Score|Points")
                    </div>
                </th>
                <th>Participant</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var submission in submissions.Items)
            {
                <tr>
                    <td>
                        <a class="text-violet-800 hover:underline italic" href="problem/@submission.ProblemId/edit">
                            @submission.ProblemName
                        </a>
                    </td>
                    <td>@submission.CreatedAt</td>
                    <td>@submission.JudgedAt</td>
                    <td>@submission.Language</td>
                    <td>
                        @($"{submission.TestCasesPassed}/{submission.TestCasesTotal}|{submission.Score}/{submission.MaxPossibleScore}|{submission.Points}")
                    </td>
                    <td>@submission.UserName</td>
                    <td><a href="submission/@submission.Id?admin=true">View</a></td>
                    @if (!judging.Contains(submission.Id))
                    {
                        <td><button @onclick="() => RejudgeAsync(submission)">Rejudge</button></td>
                    }
                    else
                    {
                        <td><button disabled>Rejudging...</button></td>
                    }
                    @if (submission.Invalidated)
                    {
                        <td><button @onclick="() => RevalidateAsync(submission)">Revalidate</button></td>

                    }
                    else
                    {
                        <td><button @onclick="() => InvalidateAsync(submission)">Invalidate</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [SupplyParameterFromQuery]
    public int? Count { get; set; }

    int page => Page ?? 1;
    int count => Count ?? 50;

    PaginateResult<SubmissionResponseDTO>? submissions;
    ContestResponseDTO? contest;
    HashSet<Guid> judging = [];

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
        // make sure the user is a contest admin
    }

    void NextPage()
    {
        NavigationManager.NavigateTo($"/contest/{Id}/manage/submissions?page={page + 1}&count={count}");
    }

    void PrevPage()
    {
        if (Page > 1)
            NavigationManager.NavigateTo($"/contest/{Id}/manage/submissions?page={page - 1}&count={count}");
    }

    private async Task LoadAsync()
    {
        var sub = SubmissionsService.TryReadSubmissionsAsync(contestId: Id, page: page, count: count);
        var cont = ContestsService.TryReadContestAsync(Id);
        (var success, submissions) = await sub;
        if (!success || submissions is null)
        {
            ModalService.ShowError("Failed to load submissions", "Internal error");
            return;
        }
        (success, contest) = await cont;

        if (!success)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        if (contest is null)
        {
            ModalService.ShowError("Contest not found", "");
            return;
        }
    }

    async Task RejudgeAsync(SubmissionResponseDTO submission)
    {
        if (judging.Contains(submission.Id))
            return;

        judging.Add(submission.Id);

        try
        {
            var error = await JudgeService.RejudgeAsync(submission.Id);
            if (error is not null)
                ModalService.ShowError(error, "Failed to judge submission");
            else
                await LoadAsync();
        }
        finally
        {
            judging.Remove(submission.Id);
        }
    }

    async Task InvalidateAsync(SubmissionResponseDTO submission)
    {
        submission.Invalidated = true;
        if (!await SubmissionsService.TryInvalidateSubmissionAsync(submission.Id))
        {
            ModalService.ShowError("Failed to invalidate submission", "Internal error");
            submission.Invalidated = false;
        }
    }

    async Task RevalidateAsync(SubmissionResponseDTO submission)
    {
        submission.Invalidated = false;
        if (!await SubmissionsService.TryRevalidateSubmissionAsync(submission.Id))
        {
            ModalService.ShowError("Failed to revalidate submission", "Internal error");
            submission.Invalidated = true;
        }
    }
}