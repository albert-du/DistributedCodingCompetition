@*
    TODO Implement 
*@
@page "/contest/{id:guid}/manage/participants"
@inject IContestsService ContestsService
@inject IUsersService UsersService
@inject IModalService ModalService

<AuthCheck Contest=Id Admin />

<PageTitle>Contest Participants</PageTitle>

<h1>@contest?.Name Participants</h1>

@if (contest is null || participants is null)
{
    <LoadingSpinner />
}
else
{
    <div>
        @foreach (var participant in participants.Items)
        {
            <a href="contest/@Id/manage/participants/@participant.Id">
                <p>@participant.Username</p>
                <p>@participant.FullName</p>
            </a>
        }
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    int page => Page ?? 1;

    [SupplyParameterFromQuery]
    public int? Count { get; set; }

    int count => Count ?? 50;

    PaginateResult<UserResponseDTO>? participants;

    ContestResponseDTO? contest;

    protected override async Task OnInitializedAsync()
    {
        (var success, contest) = await ContestsService.TryReadContestAsync(Id);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        (success, var users) = await ContestsService.TryReadContestParticipantsAsync(Id, page, count);
        if (!success || users is null)
        {
            ModalService.ShowError("Failed to load participants", "Internal error");
            return;
        }
        participants = users;
    }
}