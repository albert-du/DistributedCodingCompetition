@*
    Manage a problems for a contest
*@
@page "/contest/{id:guid}/manage/problems"
@inject NavigationManager NavigationManager
@inject IProblemsService ProblemsService
@inject IContestsService ContestsService
@inject IModalService ModalService
<AuthCheck Contest=Id Admin />

<PageTitle>Contest Problems</PageTitle>

<h1 class="text-3xl">@contestName Problems</h1>

<div class="flex flex-col gap-y-1">
    @foreach (var problem in problems)
    {
        <div class="flex justify-between w-full p-2 my-2 bg-gray-100 rounded-lg">
            <div class="flex">
                <div class="flex-grow">
                    <a class="font-semibold hover:underline" href="problem/@problem.Id/edit">@problem.Name</a>
                    <p>@problem.Difficulty</p>
                </div>
            </div>
            <div>
                <button class="w-16 p-1 font-bold text-center transition-colors duration-100 bg-white border-2 rounded-lg text-rose-500 border-rose-500 hover:bg-rose-500 hover:text-white" @onclick="() => DeleteProblemAsync(problem.Id)">Delete</button>
            </div>
        </div>
    }
</div>

<div>
    <a class="italic hover:underline" href="problem/new?contestId=@Id">Add New Problem</a>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    IReadOnlyList<ProblemResponseDTO> problems = [];

    string contestName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var (success, p) = await ContestsService.TryReadContestProblemsAsync(Id);
        if (!success || p is null)
        {
            ModalService.ShowError("Failed to load problems", "Internal Error");
            NavigationManager.NavigateTo("dashboard");
            return;
        }

        (success, var c) = await ContestsService.TryReadContestAsync(Id);

        if (!success || c is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal Error");
            NavigationManager.NavigateTo("dashboard");
            return;
        }

        contestName = c.Name;
        problems = p;
    }

    async Task DeleteProblemAsync(Guid id)
    {
        if (!await ProblemsService.TryDeleteProblemAsync(id))
            ModalService.ShowError("Failed to delete problem", "Internal Error");
        else
            problems = problems.Where(p => p.Id != id).ToList();
    }
}