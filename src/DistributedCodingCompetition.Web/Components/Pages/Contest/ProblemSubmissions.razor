@page "/contest/{contestId:guid}/solve/{problemId:guid}/submissions"
@inject IContestsService ContestsService
@inject IProblemsService ProblemsService
@inject ISubmissionsService SubmissionsService
@inject IModalService ModalService
@inject ITimeZoneProvider TimeZoneProvider
@inject IUserStateService UserStateService
@rendermode InteractiveAuto
<AuthCheck Contest=ContestId />

<PageTitle>@problemName Submissions</PageTitle>

<h1 class="text-3xl">@problemName Submissions</h1>
<h2 class="text-2xl">@contestName</h2>
<p>Submissions for @username</p>
<a class="italic hover:underline text-violet-800" href="contest/@ContestId/solve/@ProblemId">Back to problem</a>

@if (submissions is null)
{
    <LoadingSpinner />
}
else
{
    <div class="flex flex-col gap-y-1">
        @foreach (var submission in submissions.Items)
        {
            <div class="p-4 bg-white rounded-lg shadow-md">
                <div class="flex justify-between">
                    <div>@submission.Language</div>
                    <div>@submission.CreatedAt.Add(tzOffset).ToString("yyyy-MM-dd HH:mm:ss")</div>
                </div>
                <div class="border p-2 h-32">
                    <CodeEditor ReadOnly Language=@(submission.Language.Split('=').FirstOrDefault()??"text") Code=@submission.Code />
                </div>
                <div>
                    <div>Testcases: @submission.TestCasesPassed out of @submission.TestCasesTotal</div>
                    <div>Score: @submission.Score out of @submission.MaxPossibleScore</div>
                    <div>Points: @submission.Points</div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Guid ContestId { get; set; }

    [Parameter]
    public Guid ProblemId { get; set; }

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [SupplyParameterFromQuery]
    public int? Count { get; set; }

    int page => Page ?? 1;

    int count => Count ?? 50;

    TimeSpan tzOffset;

    PaginateResult<SubmissionResponseDTO>? submissions;

    string contestName = string.Empty;
    string problemName = string.Empty;
    string username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserStateService.UserAsync();
        if (user is null)
        {
            ModalService.ShowError("Failed to load user", "Internal error");
            return;
        }
        username = user.Username;

        var (success, contest) = await ContestsService.TryReadContestAsync(ContestId);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        contestName = contest.Name;

        var (success2, problem) = await ProblemsService.TryReadProblemAsync(ProblemId);
        if (!success2 || problem is null)
        {
            ModalService.ShowError("Failed to load problem", "Internal error");
            return;
        }
        problemName = problem.Name;
        var (success3, subs) = await SubmissionsService.TryReadSubmissionsAsync(contestId: ContestId, problemId: ProblemId, userId: user.Id, page: page, count: 50);
        if (!success3 || subs is null)
        {
            ModalService.ShowError("Failed to load submissions", "Internal error");
            return;
        }
        submissions = subs;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            tzOffset = await TimeZoneProvider.GetTimeZoneOffsetAsync();
            await InvokeAsync(StateHasChanged);
        }
    }
}
