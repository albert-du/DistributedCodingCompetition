@page "/contest/{id:guid}/leaderboard"
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject IContestsService ContestsService
@inject ILeaderboardService LeaderboardService
@rendermode InteractiveAuto

<AuthCheck Contest=Id />

<PageTitle>Leaderboard</PageTitle>

<h1 class="text-3xl">@contest?.Name Leaderboard</h1>
<a href="contest/@Id" class="text-violet-500 italic hover:underline">back</a>

@if (contest is null || leaderboard is null)
{
    <LoadingSpinner />
}
else
{
    <div class="flex flex-col gap-y-1">
        <div>This leaderboard was updated @leaderboard.Creation</div>
        <div>Displaying @leaderboard.Entries.Count contestants out of @leaderboard.Count</div>
        <div class="p-2">
            to view the latest scores, check the <a href="contest/@Id/leaderboard/live" class="text-violet-500 italic hover:underline">live leaderboard</a>
        </div>

        <div class="flex flex-col gap-y-1 min-h-[75vh]">
            <div class="flex w-full font-bold text-lg border-b border-slate-500">
                <div class="w-1/5">Rank</div>
                <div class="w-3/5">Username</div>
                <div class="w-1/5">Points</div>
            </div>

            @foreach (var entry in leaderboard.Entries)
            {
                <div class="flex w-full">
                    <div class="w-1/5">@entry.Rank</div>
                    <div class="w-3/5">@entry.Username</div>
                    <div class="w-1/5">@entry.Points</div>
                </div>
            }
        </div>

        <div class="flex w-full justify-between">
            <button enabled="@PrevEnabled" @onclick=Prev>Previous</button>
            <button enabled="@NextEnabled" @onclick=Next>Next</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    int page => Page ?? 1;
    ContestResponseDTO? contest;

    Leaderboard? leaderboard;

    bool NextEnabled => leaderboard?.Count is 50;
    bool PrevEnabled => page > 1;

    void Next() =>
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter(nameof(page), (page + 1)));

    void Prev()
    {
        if (page > 1)
            NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter(nameof(page), (page - 1)));
    }

    protected override async Task OnParametersSetAsync()
    {
        (var success, contest) = await ContestsService.TryReadContestAsync(Id);
        if (!success || contest is null)
        {
            ModalService.ShowError("Failed to load contest", "Internal error");
            return;
        }

        leaderboard = await LeaderboardService.TryGetLeaderboardAsync(Id, page);
        if (leaderboard is null)
        {
            ModalService.ShowError("Failed to load leaderboard", "Internal error");
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(30));
            while (await periodicTimer.WaitForNextTickAsync())
            {
                leaderboard = await LeaderboardService.TryGetLeaderboardAsync(Id, page);
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
